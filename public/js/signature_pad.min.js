/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/signature_pad.min.js":
/*!*********************************!*\
  !*** ./js/signature_pad.min.js ***!
  \*********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e8) { throw _e8; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e9) { didErr = true; err = _e9; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\r\n * Signature Pad v4.1.7 | https://github.com/szimek/signature_pad\r\n * (c) 2023 Szymon Nowak | Released under the MIT license\r\n */\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function () {\n  \"use strict\";\n\n  var t = /*#__PURE__*/function () {\n    function t(_t, e, i, s) {\n      _classCallCheck(this, t);\n\n      if (isNaN(_t) || isNaN(e)) throw new Error(\"Point is invalid: (\".concat(_t, \", \").concat(e, \")\"));\n      this.x = +_t, this.y = +e, this.pressure = i || 0, this.time = s || Date.now();\n    }\n\n    _createClass(t, [{\n      key: \"distanceTo\",\n      value: function distanceTo(_t2) {\n        return Math.sqrt(Math.pow(this.x - _t2.x, 2) + Math.pow(this.y - _t2.y, 2));\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(_t3) {\n        return this.x === _t3.x && this.y === _t3.y && this.pressure === _t3.pressure && this.time === _t3.time;\n      }\n    }, {\n      key: \"velocityFrom\",\n      value: function velocityFrom(_t4) {\n        return this.time !== _t4.time ? this.distanceTo(_t4) / (this.time - _t4.time) : 0;\n      }\n    }]);\n\n    return t;\n  }();\n\n  var e = /*#__PURE__*/function () {\n    function e(t, _e2, i, s, n, o) {\n      _classCallCheck(this, e);\n\n      this.startPoint = t, this.control2 = _e2, this.control1 = i, this.endPoint = s, this.startWidth = n, this.endWidth = o;\n    }\n\n    _createClass(e, [{\n      key: \"length\",\n      value: function length() {\n        var t,\n            _e3,\n            i = 0;\n\n        for (var _s = 0; _s <= 10; _s += 1) {\n          var n = _s / 10,\n              o = this.point(n, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x),\n              h = this.point(n, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);\n\n          if (_s > 0) {\n            var _s2 = o - t,\n                _n = h - _e3;\n\n            i += Math.sqrt(_s2 * _s2 + _n * _n);\n          }\n\n          t = o, _e3 = h;\n        }\n\n        return i;\n      }\n    }, {\n      key: \"point\",\n      value: function point(t, _e4, i, s, n) {\n        return _e4 * (1 - t) * (1 - t) * (1 - t) + 3 * i * (1 - t) * (1 - t) * t + 3 * s * (1 - t) * t * t + n * t * t * t;\n      }\n    }], [{\n      key: \"fromPoints\",\n      value: function fromPoints(t, i) {\n        var s = this.calculateControlPoints(t[0], t[1], t[2]).c2,\n            n = this.calculateControlPoints(t[1], t[2], t[3]).c1;\n        return new e(t[1], s, n, t[2], i.start, i.end);\n      }\n    }, {\n      key: \"calculateControlPoints\",\n      value: function calculateControlPoints(_e, i, s) {\n        var n = _e.x - i.x,\n            o = _e.y - i.y,\n            h = i.x - s.x,\n            r = i.y - s.y,\n            a = (_e.x + i.x) / 2,\n            c = (_e.y + i.y) / 2,\n            d = (i.x + s.x) / 2,\n            l = (i.y + s.y) / 2,\n            u = Math.sqrt(n * n + o * o),\n            v = Math.sqrt(h * h + r * r),\n            _ = v / (u + v),\n            p = d + (a - d) * _,\n            m = l + (c - l) * _,\n            g = i.x - p,\n            w = i.y - m;\n\n        return {\n          c1: new t(a + g, c + w),\n          c2: new t(d + g, l + w)\n        };\n      }\n    }]);\n\n    return e;\n  }();\n\n  var i = /*#__PURE__*/function () {\n    function i() {\n      _classCallCheck(this, i);\n\n      try {\n        this._et = new EventTarget();\n      } catch (t) {\n        this._et = document;\n      }\n    }\n\n    _createClass(i, [{\n      key: \"addEventListener\",\n      value: function addEventListener(t, e, _i) {\n        this._et.addEventListener(t, e, _i);\n      }\n    }, {\n      key: \"dispatchEvent\",\n      value: function dispatchEvent(t) {\n        return this._et.dispatchEvent(t);\n      }\n    }, {\n      key: \"removeEventListener\",\n      value: function removeEventListener(t, e, _i2) {\n        this._et.removeEventListener(t, e, _i2);\n      }\n    }]);\n\n    return i;\n  }();\n\n  var s = /*#__PURE__*/function (_i3) {\n    _inherits(s, _i3);\n\n    var _super = _createSuper(s);\n\n    function s(t) {\n      var _this;\n\n      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, s);\n\n      _this = _super.call(this), _this.canvas = t, _this._drawingStroke = !1, _this._isEmpty = !0, _this._lastPoints = [], _this._data = [], _this._lastVelocity = 0, _this._lastWidth = 0, _this._handleMouseDown = function (t) {\n        1 === t.buttons && _this._strokeBegin(t);\n      }, _this._handleMouseMove = function (t) {\n        _this._strokeMoveUpdate(t);\n      }, _this._handleMouseUp = function (t) {\n        1 === t.buttons && _this._strokeEnd(t);\n      }, _this._handleTouchStart = function (t) {\n        if (t.cancelable && t.preventDefault(), 1 === t.targetTouches.length) {\n          var _e5 = t.changedTouches[0];\n\n          _this._strokeBegin(_e5);\n        }\n      }, _this._handleTouchMove = function (t) {\n        t.cancelable && t.preventDefault();\n        var e = t.targetTouches[0];\n\n        _this._strokeMoveUpdate(e);\n      }, _this._handleTouchEnd = function (t) {\n        if (t.target === _this.canvas) {\n          t.cancelable && t.preventDefault();\n          var _e6 = t.changedTouches[0];\n\n          _this._strokeEnd(_e6);\n        }\n      }, _this._handlePointerStart = function (t) {\n        t.preventDefault(), _this._strokeBegin(t);\n      }, _this._handlePointerMove = function (t) {\n        _this._strokeMoveUpdate(t);\n      }, _this._handlePointerEnd = function (t) {\n        _this._drawingStroke && (t.preventDefault(), _this._strokeEnd(t));\n      }, _this.velocityFilterWeight = e.velocityFilterWeight || .7, _this.minWidth = e.minWidth || .5, _this.maxWidth = e.maxWidth || 2.5, _this.throttle = \"throttle\" in e ? e.throttle : 16, _this.minDistance = \"minDistance\" in e ? e.minDistance : 5, _this.dotSize = e.dotSize || 0, _this.penColor = e.penColor || \"black\", _this.backgroundColor = e.backgroundColor || \"rgba(0,0,0,0)\", _this.compositeOperation = e.compositeOperation || \"source-over\", _this._strokeMoveUpdate = _this.throttle ? function (t) {\n        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;\n        var i,\n            s,\n            n,\n            o = 0,\n            h = null;\n\n        var r = function r() {\n          o = Date.now(), h = null, i = t.apply(s, n), h || (s = null, n = []);\n        };\n\n        return function () {\n          var c = Date.now(),\n              d = e - (c - o);\n\n          for (var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++) {\n            a[_key] = arguments[_key];\n          }\n\n          return s = this, n = a, d <= 0 || d > e ? (h && (clearTimeout(h), h = null), o = c, i = t.apply(s, n), h || (s = null, n = [])) : h || (h = window.setTimeout(r, d)), i;\n        };\n      }(s.prototype._strokeUpdate, _this.throttle) : s.prototype._strokeUpdate, _this._ctx = t.getContext(\"2d\"), _this.clear(), _this.on();\n      return _this;\n    }\n\n    _createClass(s, [{\n      key: \"clear\",\n      value: function clear() {\n        var t = this._ctx,\n            e = this.canvas;\n        t.fillStyle = this.backgroundColor, t.clearRect(0, 0, e.width, e.height), t.fillRect(0, 0, e.width, e.height), this._data = [], this._reset(this._getPointGroupOptions()), this._isEmpty = !0;\n      }\n    }, {\n      key: \"fromDataURL\",\n      value: function fromDataURL(t) {\n        var _this2 = this;\n\n        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return new Promise(function (i, _s3) {\n          var n = new Image(),\n              o = e.ratio || window.devicePixelRatio || 1,\n              h = e.width || _this2.canvas.width / o,\n              r = e.height || _this2.canvas.height / o,\n              a = e.xOffset || 0,\n              c = e.yOffset || 0;\n          _this2._reset(_this2._getPointGroupOptions()), n.onload = function () {\n            _this2._ctx.drawImage(n, a, c, h, r), i();\n          }, n.onerror = function (t) {\n            _s3(t);\n          }, n.crossOrigin = \"anonymous\", n.src = t, _this2._isEmpty = !1;\n        });\n      }\n    }, {\n      key: \"toDataURL\",\n      value: function toDataURL() {\n        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"image/png\";\n        var e = arguments.length > 1 ? arguments[1] : undefined;\n        return \"image/svg+xml\" === t ? (\"object\" != _typeof(e) && (e = void 0), \"data:image/svg+xml;base64,\".concat(btoa(this.toSVG(e)))) : (\"number\" != typeof e && (e = void 0), this.canvas.toDataURL(t, e));\n      }\n    }, {\n      key: \"on\",\n      value: function on() {\n        this.canvas.style.touchAction = \"none\", this.canvas.style.msTouchAction = \"none\", this.canvas.style.userSelect = \"none\";\n        var t = /Macintosh/.test(navigator.userAgent) && \"ontouchstart\" in document;\n        window.PointerEvent && !t ? this._handlePointerEvents() : (this._handleMouseEvents(), \"ontouchstart\" in window && this._handleTouchEvents());\n      }\n    }, {\n      key: \"off\",\n      value: function off() {\n        this.canvas.style.touchAction = \"auto\", this.canvas.style.msTouchAction = \"auto\", this.canvas.style.userSelect = \"auto\", this.canvas.removeEventListener(\"pointerdown\", this._handlePointerStart), this.canvas.removeEventListener(\"pointermove\", this._handlePointerMove), this.canvas.ownerDocument.removeEventListener(\"pointerup\", this._handlePointerEnd), this.canvas.removeEventListener(\"mousedown\", this._handleMouseDown), this.canvas.removeEventListener(\"mousemove\", this._handleMouseMove), this.canvas.ownerDocument.removeEventListener(\"mouseup\", this._handleMouseUp), this.canvas.removeEventListener(\"touchstart\", this._handleTouchStart), this.canvas.removeEventListener(\"touchmove\", this._handleTouchMove), this.canvas.removeEventListener(\"touchend\", this._handleTouchEnd);\n      }\n    }, {\n      key: \"isEmpty\",\n      value: function isEmpty() {\n        return this._isEmpty;\n      }\n    }, {\n      key: \"fromData\",\n      value: function fromData(t) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            _ref$clear = _ref.clear,\n            e = _ref$clear === void 0 ? !0 : _ref$clear;\n\n        e && this.clear(), this._fromData(t, this._drawCurve.bind(this), this._drawDot.bind(this)), this._data = this._data.concat(t);\n      }\n    }, {\n      key: \"toData\",\n      value: function toData() {\n        return this._data;\n      }\n    }, {\n      key: \"_getPointGroupOptions\",\n      value: function _getPointGroupOptions(t) {\n        return {\n          penColor: t && \"penColor\" in t ? t.penColor : this.penColor,\n          dotSize: t && \"dotSize\" in t ? t.dotSize : this.dotSize,\n          minWidth: t && \"minWidth\" in t ? t.minWidth : this.minWidth,\n          maxWidth: t && \"maxWidth\" in t ? t.maxWidth : this.maxWidth,\n          velocityFilterWeight: t && \"velocityFilterWeight\" in t ? t.velocityFilterWeight : this.velocityFilterWeight,\n          compositeOperation: t && \"compositeOperation\" in t ? t.compositeOperation : this.compositeOperation\n        };\n      }\n    }, {\n      key: \"_strokeBegin\",\n      value: function _strokeBegin(t) {\n        if (!this.dispatchEvent(new CustomEvent(\"beginStroke\", {\n          detail: t,\n          cancelable: !0\n        }))) return;\n        this._drawingStroke = !0;\n\n        var e = this._getPointGroupOptions(),\n            i = Object.assign(Object.assign({}, e), {\n          points: []\n        });\n\n        this._data.push(i), this._reset(e), this._strokeUpdate(t);\n      }\n    }, {\n      key: \"_strokeUpdate\",\n      value: function _strokeUpdate(t) {\n        if (!this._drawingStroke) return;\n        if (0 === this._data.length) return void this._strokeBegin(t);\n        this.dispatchEvent(new CustomEvent(\"beforeUpdateStroke\", {\n          detail: t\n        }));\n\n        var e = t.clientX,\n            i = t.clientY,\n            _s4 = void 0 !== t.pressure ? t.pressure : void 0 !== t.force ? t.force : 0,\n            n = this._createPoint(e, i, _s4),\n            o = this._data[this._data.length - 1],\n            h = o.points,\n            r = h.length > 0 && h[h.length - 1],\n            a = !!r && n.distanceTo(r) <= this.minDistance,\n            c = this._getPointGroupOptions(o);\n\n        if (!r || !r || !a) {\n          var _t5 = this._addPoint(n, c);\n\n          r ? _t5 && this._drawCurve(_t5, c) : this._drawDot(n, c), h.push({\n            time: n.time,\n            x: n.x,\n            y: n.y,\n            pressure: n.pressure\n          });\n        }\n\n        this.dispatchEvent(new CustomEvent(\"afterUpdateStroke\", {\n          detail: t\n        }));\n      }\n    }, {\n      key: \"_strokeEnd\",\n      value: function _strokeEnd(t) {\n        this._drawingStroke && (this._strokeUpdate(t), this._drawingStroke = !1, this.dispatchEvent(new CustomEvent(\"endStroke\", {\n          detail: t\n        })));\n      }\n    }, {\n      key: \"_handlePointerEvents\",\n      value: function _handlePointerEvents() {\n        this._drawingStroke = !1, this.canvas.addEventListener(\"pointerdown\", this._handlePointerStart), this.canvas.addEventListener(\"pointermove\", this._handlePointerMove), this.canvas.ownerDocument.addEventListener(\"pointerup\", this._handlePointerEnd);\n      }\n    }, {\n      key: \"_handleMouseEvents\",\n      value: function _handleMouseEvents() {\n        this._drawingStroke = !1, this.canvas.addEventListener(\"mousedown\", this._handleMouseDown), this.canvas.addEventListener(\"mousemove\", this._handleMouseMove), this.canvas.ownerDocument.addEventListener(\"mouseup\", this._handleMouseUp);\n      }\n    }, {\n      key: \"_handleTouchEvents\",\n      value: function _handleTouchEvents() {\n        this.canvas.addEventListener(\"touchstart\", this._handleTouchStart), this.canvas.addEventListener(\"touchmove\", this._handleTouchMove), this.canvas.addEventListener(\"touchend\", this._handleTouchEnd);\n      }\n    }, {\n      key: \"_reset\",\n      value: function _reset(t) {\n        this._lastPoints = [], this._lastVelocity = 0, this._lastWidth = (t.minWidth + t.maxWidth) / 2, this._ctx.fillStyle = t.penColor, this._ctx.globalCompositeOperation = t.compositeOperation;\n      }\n    }, {\n      key: \"_createPoint\",\n      value: function _createPoint(e, i, _s5) {\n        var n = this.canvas.getBoundingClientRect();\n        return new t(e - n.left, i - n.top, _s5, new Date().getTime());\n      }\n    }, {\n      key: \"_addPoint\",\n      value: function _addPoint(t, i) {\n        var _s6 = this._lastPoints;\n\n        if (_s6.push(t), _s6.length > 2) {\n          3 === _s6.length && _s6.unshift(_s6[0]);\n\n          var _t6 = this._calculateCurveWidths(_s6[1], _s6[2], i),\n              n = e.fromPoints(_s6, _t6);\n\n          return _s6.shift(), n;\n        }\n\n        return null;\n      }\n    }, {\n      key: \"_calculateCurveWidths\",\n      value: function _calculateCurveWidths(t, e, i) {\n        var _s7 = i.velocityFilterWeight * e.velocityFrom(t) + (1 - i.velocityFilterWeight) * this._lastVelocity,\n            n = this._strokeWidth(_s7, i),\n            o = {\n          end: n,\n          start: this._lastWidth\n        };\n\n        return this._lastVelocity = _s7, this._lastWidth = n, o;\n      }\n    }, {\n      key: \"_strokeWidth\",\n      value: function _strokeWidth(t, e) {\n        return Math.max(e.maxWidth / (t + 1), e.minWidth);\n      }\n    }, {\n      key: \"_drawCurveSegment\",\n      value: function _drawCurveSegment(t, e, i) {\n        var _s8 = this._ctx;\n        _s8.moveTo(t, e), _s8.arc(t, e, i, 0, 2 * Math.PI, !1), this._isEmpty = !1;\n      }\n    }, {\n      key: \"_drawCurve\",\n      value: function _drawCurve(t, e) {\n        var i = this._ctx,\n            _s9 = t.endWidth - t.startWidth,\n            n = 2 * Math.ceil(t.length());\n\n        i.beginPath(), i.fillStyle = e.penColor;\n\n        for (var _i4 = 0; _i4 < n; _i4 += 1) {\n          var o = _i4 / n,\n              h = o * o,\n              r = h * o,\n              a = 1 - o,\n              c = a * a,\n              d = c * a;\n          var l = d * t.startPoint.x;\n          l += 3 * c * o * t.control1.x, l += 3 * a * h * t.control2.x, l += r * t.endPoint.x;\n          var u = d * t.startPoint.y;\n          u += 3 * c * o * t.control1.y, u += 3 * a * h * t.control2.y, u += r * t.endPoint.y;\n          var v = Math.min(t.startWidth + r * _s9, e.maxWidth);\n\n          this._drawCurveSegment(l, u, v);\n        }\n\n        i.closePath(), i.fill();\n      }\n    }, {\n      key: \"_drawDot\",\n      value: function _drawDot(t, e) {\n        var i = this._ctx,\n            _s10 = e.dotSize > 0 ? e.dotSize : (e.minWidth + e.maxWidth) / 2;\n\n        i.beginPath(), this._drawCurveSegment(t.x, t.y, _s10), i.closePath(), i.fillStyle = e.penColor, i.fill();\n      }\n    }, {\n      key: \"_fromData\",\n      value: function _fromData(e, i, _s11) {\n        var _iterator = _createForOfIteratorHelper(e),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var n = _step.value;\n\n            var _e7 = n.points,\n                o = this._getPointGroupOptions(n);\n\n            if (_e7.length > 1) for (var _s16 = 0; _s16 < _e7.length; _s16 += 1) {\n              var _n2 = _e7[_s16],\n                  h = new t(_n2.x, _n2.y, _n2.pressure, _n2.time);\n              0 === _s16 && this._reset(o);\n\n              var r = this._addPoint(h, o);\n\n              r && i(r, o);\n            } else this._reset(o), _s11(_e7[0], o);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }, {\n      key: \"toSVG\",\n      value: function toSVG() {\n        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            _ref2$includeBackgrou = _ref2.includeBackgroundColor,\n            t = _ref2$includeBackgrou === void 0 ? !1 : _ref2$includeBackgrou;\n\n        var e = this._data,\n            i = Math.max(window.devicePixelRatio || 1, 1),\n            _s13 = this.canvas.width / i,\n            n = this.canvas.height / i,\n            o = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n\n        if (o.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\"), o.setAttribute(\"xmlns:xlink\", \"http://www.w3.org/1999/xlink\"), o.setAttribute(\"viewBox\", \"0 0 \".concat(_s13, \" \").concat(n)), o.setAttribute(\"width\", _s13.toString()), o.setAttribute(\"height\", n.toString()), t && this.backgroundColor) {\n          var _t7 = document.createElement(\"rect\");\n\n          _t7.setAttribute(\"width\", \"100%\"), _t7.setAttribute(\"height\", \"100%\"), _t7.setAttribute(\"fill\", this.backgroundColor), o.appendChild(_t7);\n        }\n\n        return this._fromData(e, function (t, _ref3) {\n          var e = _ref3.penColor;\n          var i = document.createElement(\"path\");\n\n          if (!(isNaN(t.control1.x) || isNaN(t.control1.y) || isNaN(t.control2.x) || isNaN(t.control2.y))) {\n            var _s17 = \"M \".concat(t.startPoint.x.toFixed(3), \",\").concat(t.startPoint.y.toFixed(3), \" C \").concat(t.control1.x.toFixed(3), \",\").concat(t.control1.y.toFixed(3), \" \").concat(t.control2.x.toFixed(3), \",\").concat(t.control2.y.toFixed(3), \" \").concat(t.endPoint.x.toFixed(3), \",\").concat(t.endPoint.y.toFixed(3));\n\n            i.setAttribute(\"d\", _s17), i.setAttribute(\"stroke-width\", (2.25 * t.endWidth).toFixed(3)), i.setAttribute(\"stroke\", e), i.setAttribute(\"fill\", \"none\"), i.setAttribute(\"stroke-linecap\", \"round\"), o.appendChild(i);\n          }\n        }, function (t, _ref4) {\n          var e = _ref4.penColor,\n              i = _ref4.dotSize,\n              _s15 = _ref4.minWidth,\n              n = _ref4.maxWidth;\n          var h = document.createElement(\"circle\"),\n              r = i > 0 ? i : (_s15 + n) / 2;\n          h.setAttribute(\"r\", r.toString()), h.setAttribute(\"cx\", t.x.toString()), h.setAttribute(\"cy\", t.y.toString()), h.setAttribute(\"fill\", e), o.appendChild(h);\n        }), o.outerHTML;\n      }\n    }]);\n\n    return s;\n  }(i);\n\n  return s;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9zaWduYXR1cmVfcGFkLm1pbi5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsb0NBQWlCQyxPQUFqQixNQUEwQixlQUFhLFFBQXZDLEdBQXFEQyxNQUFNLENBQUNELE9BQVAsR0FBZUQsQ0FBQyxFQUFyRSxHQUF3RSxRQUFzQ0csb0NBQU9ILENBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxrR0FBNUMsR0FBZ0QsQ0FBeEg7QUFBK0wsQ0FBN00sQ0FBOE0sSUFBOU0sRUFBb04sWUFBVTtBQUFDOztBQUFELE1BQW9CRCxDQUFwQjtBQUFzQixlQUFZQSxFQUFaLEVBQWNDLENBQWQsRUFBZ0JRLENBQWhCLEVBQWtCQyxDQUFsQixFQUFvQjtBQUFBOztBQUFDLFVBQUdDLEtBQUssQ0FBQ1gsRUFBRCxDQUFMLElBQVVXLEtBQUssQ0FBQ1YsQ0FBRCxDQUFsQixFQUFzQixNQUFNLElBQUlXLEtBQUosOEJBQWdDWixFQUFoQyxlQUFzQ0MsQ0FBdEMsT0FBTjtBQUFrRCxXQUFLWSxDQUFMLEdBQU8sQ0FBQ2IsRUFBUixFQUFVLEtBQUtjLENBQUwsR0FBTyxDQUFDYixDQUFsQixFQUFvQixLQUFLYyxRQUFMLEdBQWNOLENBQUMsSUFBRSxDQUFyQyxFQUF1QyxLQUFLTyxJQUFMLEdBQVVOLENBQUMsSUFBRU8sSUFBSSxDQUFDQyxHQUFMLEVBQXBEO0FBQStEOztBQUFsTDtBQUFBO0FBQUEsYUFBa0wsb0JBQVdsQixHQUFYLEVBQWE7QUFBQyxlQUFPbUIsSUFBSSxDQUFDQyxJQUFMLENBQVVELElBQUksQ0FBQ0UsR0FBTCxDQUFTLEtBQUtSLENBQUwsR0FBT2IsR0FBQyxDQUFDYSxDQUFsQixFQUFvQixDQUFwQixJQUF1Qk0sSUFBSSxDQUFDRSxHQUFMLENBQVMsS0FBS1AsQ0FBTCxHQUFPZCxHQUFDLENBQUNjLENBQWxCLEVBQW9CLENBQXBCLENBQWpDLENBQVA7QUFBZ0U7QUFBaFE7QUFBQTtBQUFBLGFBQWdRLGdCQUFPZCxHQUFQLEVBQVM7QUFBQyxlQUFPLEtBQUthLENBQUwsS0FBU2IsR0FBQyxDQUFDYSxDQUFYLElBQWMsS0FBS0MsQ0FBTCxLQUFTZCxHQUFDLENBQUNjLENBQXpCLElBQTRCLEtBQUtDLFFBQUwsS0FBZ0JmLEdBQUMsQ0FBQ2UsUUFBOUMsSUFBd0QsS0FBS0MsSUFBTCxLQUFZaEIsR0FBQyxDQUFDZ0IsSUFBN0U7QUFBa0Y7QUFBNVY7QUFBQTtBQUFBLGFBQTRWLHNCQUFhaEIsR0FBYixFQUFlO0FBQUMsZUFBTyxLQUFLZ0IsSUFBTCxLQUFZaEIsR0FBQyxDQUFDZ0IsSUFBZCxHQUFtQixLQUFLTSxVQUFMLENBQWdCdEIsR0FBaEIsS0FBb0IsS0FBS2dCLElBQUwsR0FBVWhCLEdBQUMsQ0FBQ2dCLElBQWhDLENBQW5CLEdBQXlELENBQWhFO0FBQWtFO0FBQTlhOztBQUFBO0FBQUE7O0FBQUEsTUFBcWJmLENBQXJiO0FBQW0zQixlQUFZRCxDQUFaLEVBQWNDLEdBQWQsRUFBZ0JRLENBQWhCLEVBQWtCQyxDQUFsQixFQUFvQmEsQ0FBcEIsRUFBc0JDLENBQXRCLEVBQXdCO0FBQUE7O0FBQUMsV0FBS0MsVUFBTCxHQUFnQnpCLENBQWhCLEVBQWtCLEtBQUswQixRQUFMLEdBQWN6QixHQUFoQyxFQUFrQyxLQUFLMEIsUUFBTCxHQUFjbEIsQ0FBaEQsRUFBa0QsS0FBS21CLFFBQUwsR0FBY2xCLENBQWhFLEVBQWtFLEtBQUttQixVQUFMLEdBQWdCTixDQUFsRixFQUFvRixLQUFLTyxRQUFMLEdBQWNOLENBQWxHO0FBQW9HOztBQUFoL0I7QUFBQTtBQUFBLGFBQWcvQixrQkFBUTtBQUFDLFlBQUl4QixDQUFKO0FBQUEsWUFBTUMsR0FBTjtBQUFBLFlBQVFRLENBQUMsR0FBQyxDQUFWOztBQUFZLGFBQUksSUFBSUMsRUFBQyxHQUFDLENBQVYsRUFBWUEsRUFBQyxJQUFFLEVBQWYsRUFBa0JBLEVBQUMsSUFBRSxDQUFyQixFQUF1QjtBQUFDLGNBQU1hLENBQUMsR0FBQ2IsRUFBQyxHQUFDLEVBQVY7QUFBQSxjQUFhYyxDQUFDLEdBQUMsS0FBS08sS0FBTCxDQUFXUixDQUFYLEVBQWEsS0FBS0UsVUFBTCxDQUFnQlosQ0FBN0IsRUFBK0IsS0FBS2MsUUFBTCxDQUFjZCxDQUE3QyxFQUErQyxLQUFLYSxRQUFMLENBQWNiLENBQTdELEVBQStELEtBQUtlLFFBQUwsQ0FBY2YsQ0FBN0UsQ0FBZjtBQUFBLGNBQStGbUIsQ0FBQyxHQUFDLEtBQUtELEtBQUwsQ0FBV1IsQ0FBWCxFQUFhLEtBQUtFLFVBQUwsQ0FBZ0JYLENBQTdCLEVBQStCLEtBQUthLFFBQUwsQ0FBY2IsQ0FBN0MsRUFBK0MsS0FBS1ksUUFBTCxDQUFjWixDQUE3RCxFQUErRCxLQUFLYyxRQUFMLENBQWNkLENBQTdFLENBQWpHOztBQUFpTCxjQUFHSixFQUFDLEdBQUMsQ0FBTCxFQUFPO0FBQUMsZ0JBQU1BLEdBQUMsR0FBQ2MsQ0FBQyxHQUFDeEIsQ0FBVjtBQUFBLGdCQUFZdUIsRUFBQyxHQUFDUyxDQUFDLEdBQUMvQixHQUFoQjs7QUFBa0JRLFlBQUFBLENBQUMsSUFBRVUsSUFBSSxDQUFDQyxJQUFMLENBQVVWLEdBQUMsR0FBQ0EsR0FBRixHQUFJYSxFQUFDLEdBQUNBLEVBQWhCLENBQUg7QUFBc0I7O0FBQUF2QixVQUFBQSxDQUFDLEdBQUN3QixDQUFGLEVBQUl2QixHQUFDLEdBQUMrQixDQUFOO0FBQVE7O0FBQUEsZUFBT3ZCLENBQVA7QUFBUztBQUEvd0M7QUFBQTtBQUFBLGFBQSt3QyxlQUFNVCxDQUFOLEVBQVFDLEdBQVIsRUFBVVEsQ0FBVixFQUFZQyxDQUFaLEVBQWNhLENBQWQsRUFBZ0I7QUFBQyxlQUFPdEIsR0FBQyxJQUFFLElBQUVELENBQUosQ0FBRCxJQUFTLElBQUVBLENBQVgsS0FBZSxJQUFFQSxDQUFqQixJQUFvQixJQUFFUyxDQUFGLElBQUssSUFBRVQsQ0FBUCxLQUFXLElBQUVBLENBQWIsSUFBZ0JBLENBQXBDLEdBQXNDLElBQUVVLENBQUYsSUFBSyxJQUFFVixDQUFQLElBQVVBLENBQVYsR0FBWUEsQ0FBbEQsR0FBb0R1QixDQUFDLEdBQUN2QixDQUFGLEdBQUlBLENBQUosR0FBTUEsQ0FBakU7QUFBbUU7QUFBbjJDO0FBQUE7QUFBQSxhQUF1YixvQkFBa0JBLENBQWxCLEVBQW9CUyxDQUFwQixFQUFzQjtBQUFDLFlBQU1DLENBQUMsR0FBQyxLQUFLdUIsc0JBQUwsQ0FBNEJqQyxDQUFDLENBQUMsQ0FBRCxDQUE3QixFQUFpQ0EsQ0FBQyxDQUFDLENBQUQsQ0FBbEMsRUFBc0NBLENBQUMsQ0FBQyxDQUFELENBQXZDLEVBQTRDa0MsRUFBcEQ7QUFBQSxZQUF1RFgsQ0FBQyxHQUFDLEtBQUtVLHNCQUFMLENBQTRCakMsQ0FBQyxDQUFDLENBQUQsQ0FBN0IsRUFBaUNBLENBQUMsQ0FBQyxDQUFELENBQWxDLEVBQXNDQSxDQUFDLENBQUMsQ0FBRCxDQUF2QyxFQUE0Q21DLEVBQXJHO0FBQXdHLGVBQU8sSUFBSWxDLENBQUosQ0FBTUQsQ0FBQyxDQUFDLENBQUQsQ0FBUCxFQUFXVSxDQUFYLEVBQWFhLENBQWIsRUFBZXZCLENBQUMsQ0FBQyxDQUFELENBQWhCLEVBQW9CUyxDQUFDLENBQUMyQixLQUF0QixFQUE0QjNCLENBQUMsQ0FBQzRCLEdBQTlCLENBQVA7QUFBMEM7QUFBaG1CO0FBQUE7QUFBQSxhQUFnbUIsZ0NBQThCcEMsRUFBOUIsRUFBZ0NRLENBQWhDLEVBQWtDQyxDQUFsQyxFQUFvQztBQUFDLFlBQU1hLENBQUMsR0FBQ3RCLEVBQUMsQ0FBQ1ksQ0FBRixHQUFJSixDQUFDLENBQUNJLENBQWQ7QUFBQSxZQUFnQlcsQ0FBQyxHQUFDdkIsRUFBQyxDQUFDYSxDQUFGLEdBQUlMLENBQUMsQ0FBQ0ssQ0FBeEI7QUFBQSxZQUEwQmtCLENBQUMsR0FBQ3ZCLENBQUMsQ0FBQ0ksQ0FBRixHQUFJSCxDQUFDLENBQUNHLENBQWxDO0FBQUEsWUFBb0N5QixDQUFDLEdBQUM3QixDQUFDLENBQUNLLENBQUYsR0FBSUosQ0FBQyxDQUFDSSxDQUE1QztBQUFBLFlBQThDeUIsQ0FBQyxHQUFDLENBQUN0QyxFQUFDLENBQUNZLENBQUYsR0FBSUosQ0FBQyxDQUFDSSxDQUFQLElBQVUsQ0FBMUQ7QUFBQSxZQUE0RDJCLENBQUMsR0FBQyxDQUFDdkMsRUFBQyxDQUFDYSxDQUFGLEdBQUlMLENBQUMsQ0FBQ0ssQ0FBUCxJQUFVLENBQXhFO0FBQUEsWUFBMEUyQixDQUFDLEdBQUMsQ0FBQ2hDLENBQUMsQ0FBQ0ksQ0FBRixHQUFJSCxDQUFDLENBQUNHLENBQVAsSUFBVSxDQUF0RjtBQUFBLFlBQXdGNkIsQ0FBQyxHQUFDLENBQUNqQyxDQUFDLENBQUNLLENBQUYsR0FBSUosQ0FBQyxDQUFDSSxDQUFQLElBQVUsQ0FBcEc7QUFBQSxZQUFzRzZCLENBQUMsR0FBQ3hCLElBQUksQ0FBQ0MsSUFBTCxDQUFVRyxDQUFDLEdBQUNBLENBQUYsR0FBSUMsQ0FBQyxHQUFDQSxDQUFoQixDQUF4RztBQUFBLFlBQTJIb0IsQ0FBQyxHQUFDekIsSUFBSSxDQUFDQyxJQUFMLENBQVVZLENBQUMsR0FBQ0EsQ0FBRixHQUFJTSxDQUFDLEdBQUNBLENBQWhCLENBQTdIO0FBQUEsWUFBZ0pPLENBQUMsR0FBQ0QsQ0FBQyxJQUFFRCxDQUFDLEdBQUNDLENBQUosQ0FBbko7QUFBQSxZQUEwSkUsQ0FBQyxHQUFDTCxDQUFDLEdBQUMsQ0FBQ0YsQ0FBQyxHQUFDRSxDQUFILElBQU1JLENBQXBLO0FBQUEsWUFBc0tFLENBQUMsR0FBQ0wsQ0FBQyxHQUFDLENBQUNGLENBQUMsR0FBQ0UsQ0FBSCxJQUFNRyxDQUFoTDtBQUFBLFlBQWtMRyxDQUFDLEdBQUN2QyxDQUFDLENBQUNJLENBQUYsR0FBSWlDLENBQXhMO0FBQUEsWUFBMExHLENBQUMsR0FBQ3hDLENBQUMsQ0FBQ0ssQ0FBRixHQUFJaUMsQ0FBaE07O0FBQWtNLGVBQU07QUFBQ1osVUFBQUEsRUFBRSxFQUFDLElBQUluQyxDQUFKLENBQU11QyxDQUFDLEdBQUNTLENBQVIsRUFBVVIsQ0FBQyxHQUFDUyxDQUFaLENBQUo7QUFBbUJmLFVBQUFBLEVBQUUsRUFBQyxJQUFJbEMsQ0FBSixDQUFNeUMsQ0FBQyxHQUFDTyxDQUFSLEVBQVVOLENBQUMsR0FBQ08sQ0FBWjtBQUF0QixTQUFOO0FBQTRDO0FBQW4zQjs7QUFBQTtBQUFBOztBQUFBLE1BQTAyQ3hDLENBQTEyQztBQUE0MkMsaUJBQWE7QUFBQTs7QUFBQyxVQUFHO0FBQUMsYUFBS3lDLEdBQUwsR0FBUyxJQUFJQyxXQUFKLEVBQVQ7QUFBeUIsT0FBN0IsQ0FBNkIsT0FBTW5ELENBQU4sRUFBUTtBQUFDLGFBQUtrRCxHQUFMLEdBQVNFLFFBQVQ7QUFBa0I7QUFBQzs7QUFBbjdDO0FBQUE7QUFBQSxhQUFtN0MsMEJBQWlCcEQsQ0FBakIsRUFBbUJDLENBQW5CLEVBQXFCUSxFQUFyQixFQUF1QjtBQUFDLGFBQUt5QyxHQUFMLENBQVNHLGdCQUFULENBQTBCckQsQ0FBMUIsRUFBNEJDLENBQTVCLEVBQThCUSxFQUE5QjtBQUFpQztBQUE1K0M7QUFBQTtBQUFBLGFBQTQrQyx1QkFBY1QsQ0FBZCxFQUFnQjtBQUFDLGVBQU8sS0FBS2tELEdBQUwsQ0FBU0ksYUFBVCxDQUF1QnRELENBQXZCLENBQVA7QUFBaUM7QUFBOWhEO0FBQUE7QUFBQSxhQUE4aEQsNkJBQW9CQSxDQUFwQixFQUFzQkMsQ0FBdEIsRUFBd0JRLEdBQXhCLEVBQTBCO0FBQUMsYUFBS3lDLEdBQUwsQ0FBU0ssbUJBQVQsQ0FBNkJ2RCxDQUE3QixFQUErQkMsQ0FBL0IsRUFBaUNRLEdBQWpDO0FBQW9DO0FBQTdsRDs7QUFBQTtBQUFBOztBQUFBLE1BQW9tREMsQ0FBcG1EO0FBQUE7O0FBQUE7O0FBQWduRCxlQUFZVixDQUFaLEVBQW1CO0FBQUE7O0FBQUEsVUFBTEMsQ0FBSyx1RUFBSCxFQUFHOztBQUFBOztBQUFDLGlDQUFRLE1BQUt1RCxNQUFMLEdBQVl4RCxDQUFwQixFQUFzQixNQUFLeUQsY0FBTCxHQUFvQixDQUFDLENBQTNDLEVBQTZDLE1BQUtDLFFBQUwsR0FBYyxDQUFDLENBQTVELEVBQThELE1BQUtDLFdBQUwsR0FBaUIsRUFBL0UsRUFBa0YsTUFBS0MsS0FBTCxHQUFXLEVBQTdGLEVBQWdHLE1BQUtDLGFBQUwsR0FBbUIsQ0FBbkgsRUFBcUgsTUFBS0MsVUFBTCxHQUFnQixDQUFySSxFQUF1SSxNQUFLQyxnQkFBTCxHQUFzQixVQUFBL0QsQ0FBQyxFQUFFO0FBQUMsY0FBSUEsQ0FBQyxDQUFDZ0UsT0FBTixJQUFlLE1BQUtDLFlBQUwsQ0FBa0JqRSxDQUFsQixDQUFmO0FBQW9DLE9BQXJNLEVBQXNNLE1BQUtrRSxnQkFBTCxHQUFzQixVQUFBbEUsQ0FBQyxFQUFFO0FBQUMsY0FBS21FLGlCQUFMLENBQXVCbkUsQ0FBdkI7QUFBMEIsT0FBMVAsRUFBMlAsTUFBS29FLGNBQUwsR0FBb0IsVUFBQXBFLENBQUMsRUFBRTtBQUFDLGNBQUlBLENBQUMsQ0FBQ2dFLE9BQU4sSUFBZSxNQUFLSyxVQUFMLENBQWdCckUsQ0FBaEIsQ0FBZjtBQUFrQyxPQUFyVCxFQUFzVCxNQUFLc0UsaUJBQUwsR0FBdUIsVUFBQXRFLENBQUMsRUFBRTtBQUFDLFlBQUdBLENBQUMsQ0FBQ3VFLFVBQUYsSUFBY3ZFLENBQUMsQ0FBQ3dFLGNBQUYsRUFBZCxFQUFpQyxNQUFJeEUsQ0FBQyxDQUFDeUUsYUFBRixDQUFnQkMsTUFBeEQsRUFBK0Q7QUFBQyxjQUFNekUsR0FBQyxHQUFDRCxDQUFDLENBQUMyRSxjQUFGLENBQWlCLENBQWpCLENBQVI7O0FBQTRCLGdCQUFLVixZQUFMLENBQWtCaEUsR0FBbEI7QUFBcUI7QUFBQyxPQUFuYyxFQUFvYyxNQUFLMkUsZ0JBQUwsR0FBc0IsVUFBQTVFLENBQUMsRUFBRTtBQUFDQSxRQUFBQSxDQUFDLENBQUN1RSxVQUFGLElBQWN2RSxDQUFDLENBQUN3RSxjQUFGLEVBQWQ7QUFBaUMsWUFBTXZFLENBQUMsR0FBQ0QsQ0FBQyxDQUFDeUUsYUFBRixDQUFnQixDQUFoQixDQUFSOztBQUEyQixjQUFLTixpQkFBTCxDQUF1QmxFLENBQXZCO0FBQTBCLE9BQXBqQixFQUFxakIsTUFBSzRFLGVBQUwsR0FBcUIsVUFBQTdFLENBQUMsRUFBRTtBQUFDLFlBQUdBLENBQUMsQ0FBQzhFLE1BQUYsS0FBVyxNQUFLdEIsTUFBbkIsRUFBMEI7QUFBQ3hELFVBQUFBLENBQUMsQ0FBQ3VFLFVBQUYsSUFBY3ZFLENBQUMsQ0FBQ3dFLGNBQUYsRUFBZDtBQUFpQyxjQUFNdkUsR0FBQyxHQUFDRCxDQUFDLENBQUMyRSxjQUFGLENBQWlCLENBQWpCLENBQVI7O0FBQTRCLGdCQUFLTixVQUFMLENBQWdCcEUsR0FBaEI7QUFBbUI7QUFBQyxPQUExckIsRUFBMnJCLE1BQUs4RSxtQkFBTCxHQUF5QixVQUFBL0UsQ0FBQyxFQUFFO0FBQUNBLFFBQUFBLENBQUMsQ0FBQ3dFLGNBQUYsSUFBbUIsTUFBS1AsWUFBTCxDQUFrQmpFLENBQWxCLENBQW5CO0FBQXdDLE9BQWh3QixFQUFpd0IsTUFBS2dGLGtCQUFMLEdBQXdCLFVBQUFoRixDQUFDLEVBQUU7QUFBQyxjQUFLbUUsaUJBQUwsQ0FBdUJuRSxDQUF2QjtBQUEwQixPQUF2ekIsRUFBd3pCLE1BQUtpRixpQkFBTCxHQUF1QixVQUFBakYsQ0FBQyxFQUFFO0FBQUMsY0FBS3lELGNBQUwsS0FBc0J6RCxDQUFDLENBQUN3RSxjQUFGLElBQW1CLE1BQUtILFVBQUwsQ0FBZ0JyRSxDQUFoQixDQUF6QztBQUE2RCxPQUFoNUIsRUFBaTVCLE1BQUtrRixvQkFBTCxHQUEwQmpGLENBQUMsQ0FBQ2lGLG9CQUFGLElBQXdCLEVBQW44QixFQUFzOEIsTUFBS0MsUUFBTCxHQUFjbEYsQ0FBQyxDQUFDa0YsUUFBRixJQUFZLEVBQWgrQixFQUFtK0IsTUFBS0MsUUFBTCxHQUFjbkYsQ0FBQyxDQUFDbUYsUUFBRixJQUFZLEdBQTcvQixFQUFpZ0MsTUFBS0MsUUFBTCxHQUFjLGNBQWFwRixDQUFiLEdBQWVBLENBQUMsQ0FBQ29GLFFBQWpCLEdBQTBCLEVBQXppQyxFQUE0aUMsTUFBS0MsV0FBTCxHQUFpQixpQkFBZ0JyRixDQUFoQixHQUFrQkEsQ0FBQyxDQUFDcUYsV0FBcEIsR0FBZ0MsQ0FBN2xDLEVBQStsQyxNQUFLQyxPQUFMLEdBQWF0RixDQUFDLENBQUNzRixPQUFGLElBQVcsQ0FBdm5DLEVBQXluQyxNQUFLQyxRQUFMLEdBQWN2RixDQUFDLENBQUN1RixRQUFGLElBQVksT0FBbnBDLEVBQTJwQyxNQUFLQyxlQUFMLEdBQXFCeEYsQ0FBQyxDQUFDd0YsZUFBRixJQUFtQixlQUFuc0MsRUFBbXRDLE1BQUtDLGtCQUFMLEdBQXdCekYsQ0FBQyxDQUFDeUYsa0JBQUYsSUFBc0IsYUFBandDLEVBQSt3QyxNQUFLdkIsaUJBQUwsR0FBdUIsTUFBS2tCLFFBQUwsR0FBYyxVQUFTckYsQ0FBVCxFQUFpQjtBQUFBLFlBQU5DLENBQU0sdUVBQUosR0FBSTtBQUFDLFlBQUlRLENBQUo7QUFBQSxZQUFNQyxDQUFOO0FBQUEsWUFBUWEsQ0FBUjtBQUFBLFlBQVVDLENBQUMsR0FBQyxDQUFaO0FBQUEsWUFBY1EsQ0FBQyxHQUFDLElBQWhCOztBQUFxQixZQUFNTSxDQUFDLEdBQUMsU0FBRkEsQ0FBRSxHQUFJO0FBQUNkLFVBQUFBLENBQUMsR0FBQ1AsSUFBSSxDQUFDQyxHQUFMLEVBQUYsRUFBYWMsQ0FBQyxHQUFDLElBQWYsRUFBb0J2QixDQUFDLEdBQUNULENBQUMsQ0FBQzJGLEtBQUYsQ0FBUWpGLENBQVIsRUFBVWEsQ0FBVixDQUF0QixFQUFtQ1MsQ0FBQyxLQUFHdEIsQ0FBQyxHQUFDLElBQUYsRUFBT2EsQ0FBQyxHQUFDLEVBQVosQ0FBcEM7QUFBb0QsU0FBakU7O0FBQWtFLGVBQU8sWUFBYztBQUFDLGNBQU1pQixDQUFDLEdBQUN2QixJQUFJLENBQUNDLEdBQUwsRUFBUjtBQUFBLGNBQW1CdUIsQ0FBQyxHQUFDeEMsQ0FBQyxJQUFFdUMsQ0FBQyxHQUFDaEIsQ0FBSixDQUF0Qjs7QUFBRCw0Q0FBRmUsQ0FBRTtBQUFGQSxZQUFBQSxDQUFFO0FBQUE7O0FBQThCLGlCQUFPN0IsQ0FBQyxHQUFDLElBQUYsRUFBT2EsQ0FBQyxHQUFDZ0IsQ0FBVCxFQUFXRSxDQUFDLElBQUUsQ0FBSCxJQUFNQSxDQUFDLEdBQUN4QyxDQUFSLElBQVcrQixDQUFDLEtBQUc0RCxZQUFZLENBQUM1RCxDQUFELENBQVosRUFBZ0JBLENBQUMsR0FBQyxJQUFyQixDQUFELEVBQTRCUixDQUFDLEdBQUNnQixDQUE5QixFQUFnQy9CLENBQUMsR0FBQ1QsQ0FBQyxDQUFDMkYsS0FBRixDQUFRakYsQ0FBUixFQUFVYSxDQUFWLENBQWxDLEVBQStDUyxDQUFDLEtBQUd0QixDQUFDLEdBQUMsSUFBRixFQUFPYSxDQUFDLEdBQUMsRUFBWixDQUEzRCxJQUE0RVMsQ0FBQyxLQUFHQSxDQUFDLEdBQUM2RCxNQUFNLENBQUNDLFVBQVAsQ0FBa0J4RCxDQUFsQixFQUFvQkcsQ0FBcEIsQ0FBTCxDQUF4RixFQUFxSGhDLENBQTVIO0FBQThILFNBQWpMO0FBQWtMLE9BQTNSLENBQTRSQyxDQUFDLENBQUNxRixTQUFGLENBQVlDLGFBQXhTLEVBQXNULE1BQUtYLFFBQTNULENBQWQsR0FBbVYzRSxDQUFDLENBQUNxRixTQUFGLENBQVlDLGFBQXJvRCxFQUFtcEQsTUFBS0MsSUFBTCxHQUFVakcsQ0FBQyxDQUFDa0csVUFBRixDQUFhLElBQWIsQ0FBN3BELEVBQWdyRCxNQUFLQyxLQUFMLEVBQWhyRCxFQUE2ckQsTUFBS0MsRUFBTCxFQUE3ckQ7QUFBRDtBQUF3c0Q7O0FBQTMwRztBQUFBO0FBQUEsYUFBMjBHLGlCQUFPO0FBQUMsWUFBV3BHLENBQVgsR0FBdUIsSUFBdkIsQ0FBTWlHLElBQU47QUFBQSxZQUFvQmhHLENBQXBCLEdBQXVCLElBQXZCLENBQWF1RCxNQUFiO0FBQTRCeEQsUUFBQUEsQ0FBQyxDQUFDcUcsU0FBRixHQUFZLEtBQUtaLGVBQWpCLEVBQWlDekYsQ0FBQyxDQUFDc0csU0FBRixDQUFZLENBQVosRUFBYyxDQUFkLEVBQWdCckcsQ0FBQyxDQUFDc0csS0FBbEIsRUFBd0J0RyxDQUFDLENBQUN1RyxNQUExQixDQUFqQyxFQUFtRXhHLENBQUMsQ0FBQ3lHLFFBQUYsQ0FBVyxDQUFYLEVBQWEsQ0FBYixFQUFleEcsQ0FBQyxDQUFDc0csS0FBakIsRUFBdUJ0RyxDQUFDLENBQUN1RyxNQUF6QixDQUFuRSxFQUFvRyxLQUFLNUMsS0FBTCxHQUFXLEVBQS9HLEVBQWtILEtBQUs4QyxNQUFMLENBQVksS0FBS0MscUJBQUwsRUFBWixDQUFsSCxFQUE0SixLQUFLakQsUUFBTCxHQUFjLENBQUMsQ0FBM0s7QUFBNks7QUFBNWhIO0FBQUE7QUFBQSxhQUE0aEgscUJBQVkxRCxDQUFaLEVBQW1CO0FBQUE7O0FBQUEsWUFBTEMsQ0FBSyx1RUFBSCxFQUFHO0FBQUMsZUFBTyxJQUFJMkcsT0FBSixDQUFhLFVBQUNuRyxDQUFELEVBQUdDLEdBQUgsRUFBTztBQUFDLGNBQU1hLENBQUMsR0FBQyxJQUFJc0YsS0FBSixFQUFSO0FBQUEsY0FBa0JyRixDQUFDLEdBQUN2QixDQUFDLENBQUM2RyxLQUFGLElBQVNqQixNQUFNLENBQUNrQixnQkFBaEIsSUFBa0MsQ0FBdEQ7QUFBQSxjQUF3RC9FLENBQUMsR0FBQy9CLENBQUMsQ0FBQ3NHLEtBQUYsSUFBUyxNQUFJLENBQUMvQyxNQUFMLENBQVkrQyxLQUFaLEdBQWtCL0UsQ0FBckY7QUFBQSxjQUF1RmMsQ0FBQyxHQUFDckMsQ0FBQyxDQUFDdUcsTUFBRixJQUFVLE1BQUksQ0FBQ2hELE1BQUwsQ0FBWWdELE1BQVosR0FBbUJoRixDQUF0SDtBQUFBLGNBQXdIZSxDQUFDLEdBQUN0QyxDQUFDLENBQUMrRyxPQUFGLElBQVcsQ0FBckk7QUFBQSxjQUF1SXhFLENBQUMsR0FBQ3ZDLENBQUMsQ0FBQ2dILE9BQUYsSUFBVyxDQUFwSjtBQUFzSixnQkFBSSxDQUFDUCxNQUFMLENBQVksTUFBSSxDQUFDQyxxQkFBTCxFQUFaLEdBQTBDcEYsQ0FBQyxDQUFDMkYsTUFBRixHQUFTLFlBQUk7QUFBQyxrQkFBSSxDQUFDakIsSUFBTCxDQUFVa0IsU0FBVixDQUFvQjVGLENBQXBCLEVBQXNCZ0IsQ0FBdEIsRUFBd0JDLENBQXhCLEVBQTBCUixDQUExQixFQUE0Qk0sQ0FBNUIsR0FBK0I3QixDQUFDLEVBQWhDO0FBQW1DLFdBQTNGLEVBQTRGYyxDQUFDLENBQUM2RixPQUFGLEdBQVUsVUFBQXBILENBQUMsRUFBRTtBQUFDVSxZQUFBQSxHQUFDLENBQUNWLENBQUQsQ0FBRDtBQUFLLFdBQS9HLEVBQWdIdUIsQ0FBQyxDQUFDOEYsV0FBRixHQUFjLFdBQTlILEVBQTBJOUYsQ0FBQyxDQUFDK0YsR0FBRixHQUFNdEgsQ0FBaEosRUFBa0osTUFBSSxDQUFDMEQsUUFBTCxHQUFjLENBQUMsQ0FBaks7QUFBbUssU0FBOVUsQ0FBUDtBQUF3VjtBQUF4NEg7QUFBQTtBQUFBLGFBQXc0SCxxQkFBMEI7QUFBQSxZQUFoQjFELENBQWdCLHVFQUFkLFdBQWM7QUFBQSxZQUFGQyxDQUFFO0FBQUMsZUFBTSxvQkFBa0JELENBQWxCLElBQXFCLG9CQUFpQkMsQ0FBakIsTUFBcUJBLENBQUMsR0FBQyxLQUFLLENBQTVCLHVDQUE0RHNILElBQUksQ0FBQyxLQUFLQyxLQUFMLENBQVd2SCxDQUFYLENBQUQsQ0FBaEUsQ0FBckIsS0FBeUcsWUFBVSxPQUFPQSxDQUFqQixLQUFxQkEsQ0FBQyxHQUFDLEtBQUssQ0FBNUIsR0FBK0IsS0FBS3VELE1BQUwsQ0FBWWlFLFNBQVosQ0FBc0J6SCxDQUF0QixFQUF3QkMsQ0FBeEIsQ0FBeEksQ0FBTjtBQUEwSztBQUE3a0k7QUFBQTtBQUFBLGFBQTZrSSxjQUFJO0FBQUMsYUFBS3VELE1BQUwsQ0FBWWtFLEtBQVosQ0FBa0JDLFdBQWxCLEdBQThCLE1BQTlCLEVBQXFDLEtBQUtuRSxNQUFMLENBQVlrRSxLQUFaLENBQWtCRSxhQUFsQixHQUFnQyxNQUFyRSxFQUE0RSxLQUFLcEUsTUFBTCxDQUFZa0UsS0FBWixDQUFrQkcsVUFBbEIsR0FBNkIsTUFBekc7QUFBZ0gsWUFBTTdILENBQUMsR0FBQyxZQUFZOEgsSUFBWixDQUFpQkMsU0FBUyxDQUFDQyxTQUEzQixLQUF1QyxrQkFBaUI1RSxRQUFoRTtBQUF5RXlDLFFBQUFBLE1BQU0sQ0FBQ29DLFlBQVAsSUFBcUIsQ0FBQ2pJLENBQXRCLEdBQXdCLEtBQUtrSSxvQkFBTCxFQUF4QixJQUFxRCxLQUFLQyxrQkFBTCxJQUEwQixrQkFBaUJ0QyxNQUFqQixJQUF5QixLQUFLdUMsa0JBQUwsRUFBeEc7QUFBbUk7QUFBOTRJO0FBQUE7QUFBQSxhQUE4NEksZUFBSztBQUFDLGFBQUs1RSxNQUFMLENBQVlrRSxLQUFaLENBQWtCQyxXQUFsQixHQUE4QixNQUE5QixFQUFxQyxLQUFLbkUsTUFBTCxDQUFZa0UsS0FBWixDQUFrQkUsYUFBbEIsR0FBZ0MsTUFBckUsRUFBNEUsS0FBS3BFLE1BQUwsQ0FBWWtFLEtBQVosQ0FBa0JHLFVBQWxCLEdBQTZCLE1BQXpHLEVBQWdILEtBQUtyRSxNQUFMLENBQVlELG1CQUFaLENBQWdDLGFBQWhDLEVBQThDLEtBQUt3QixtQkFBbkQsQ0FBaEgsRUFBd0wsS0FBS3ZCLE1BQUwsQ0FBWUQsbUJBQVosQ0FBZ0MsYUFBaEMsRUFBOEMsS0FBS3lCLGtCQUFuRCxDQUF4TCxFQUErUCxLQUFLeEIsTUFBTCxDQUFZNkUsYUFBWixDQUEwQjlFLG1CQUExQixDQUE4QyxXQUE5QyxFQUEwRCxLQUFLMEIsaUJBQS9ELENBQS9QLEVBQWlWLEtBQUt6QixNQUFMLENBQVlELG1CQUFaLENBQWdDLFdBQWhDLEVBQTRDLEtBQUtRLGdCQUFqRCxDQUFqVixFQUFvWixLQUFLUCxNQUFMLENBQVlELG1CQUFaLENBQWdDLFdBQWhDLEVBQTRDLEtBQUtXLGdCQUFqRCxDQUFwWixFQUF1ZCxLQUFLVixNQUFMLENBQVk2RSxhQUFaLENBQTBCOUUsbUJBQTFCLENBQThDLFNBQTlDLEVBQXdELEtBQUthLGNBQTdELENBQXZkLEVBQW9pQixLQUFLWixNQUFMLENBQVlELG1CQUFaLENBQWdDLFlBQWhDLEVBQTZDLEtBQUtlLGlCQUFsRCxDQUFwaUIsRUFBeW1CLEtBQUtkLE1BQUwsQ0FBWUQsbUJBQVosQ0FBZ0MsV0FBaEMsRUFBNEMsS0FBS3FCLGdCQUFqRCxDQUF6bUIsRUFBNHFCLEtBQUtwQixNQUFMLENBQVlELG1CQUFaLENBQWdDLFVBQWhDLEVBQTJDLEtBQUtzQixlQUFoRCxDQUE1cUI7QUFBNnVCO0FBQWpvSztBQUFBO0FBQUEsYUFBaW9LLG1CQUFTO0FBQUMsZUFBTyxLQUFLbkIsUUFBWjtBQUFxQjtBQUFocUs7QUFBQTtBQUFBLGFBQWdxSyxrQkFBUzFELENBQVQsRUFBMkI7QUFBQSx1RkFBSCxFQUFHO0FBQUEsOEJBQWZtRyxLQUFlO0FBQUEsWUFBVGxHLENBQVMsMkJBQVAsQ0FBQyxDQUFNOztBQUFDQSxRQUFBQSxDQUFDLElBQUUsS0FBS2tHLEtBQUwsRUFBSCxFQUFnQixLQUFLbUMsU0FBTCxDQUFldEksQ0FBZixFQUFpQixLQUFLdUksVUFBTCxDQUFnQkMsSUFBaEIsQ0FBcUIsSUFBckIsQ0FBakIsRUFBNEMsS0FBS0MsUUFBTCxDQUFjRCxJQUFkLENBQW1CLElBQW5CLENBQTVDLENBQWhCLEVBQXNGLEtBQUs1RSxLQUFMLEdBQVcsS0FBS0EsS0FBTCxDQUFXOEUsTUFBWCxDQUFrQjFJLENBQWxCLENBQWpHO0FBQXNIO0FBQWx6SztBQUFBO0FBQUEsYUFBa3pLLGtCQUFRO0FBQUMsZUFBTyxLQUFLNEQsS0FBWjtBQUFrQjtBQUE3MEs7QUFBQTtBQUFBLGFBQTYwSywrQkFBc0I1RCxDQUF0QixFQUF3QjtBQUFDLGVBQU07QUFBQ3dGLFVBQUFBLFFBQVEsRUFBQ3hGLENBQUMsSUFBRSxjQUFhQSxDQUFoQixHQUFrQkEsQ0FBQyxDQUFDd0YsUUFBcEIsR0FBNkIsS0FBS0EsUUFBNUM7QUFBcURELFVBQUFBLE9BQU8sRUFBQ3ZGLENBQUMsSUFBRSxhQUFZQSxDQUFmLEdBQWlCQSxDQUFDLENBQUN1RixPQUFuQixHQUEyQixLQUFLQSxPQUE3RjtBQUFxR0osVUFBQUEsUUFBUSxFQUFDbkYsQ0FBQyxJQUFFLGNBQWFBLENBQWhCLEdBQWtCQSxDQUFDLENBQUNtRixRQUFwQixHQUE2QixLQUFLQSxRQUFoSjtBQUF5SkMsVUFBQUEsUUFBUSxFQUFDcEYsQ0FBQyxJQUFFLGNBQWFBLENBQWhCLEdBQWtCQSxDQUFDLENBQUNvRixRQUFwQixHQUE2QixLQUFLQSxRQUFwTTtBQUE2TUYsVUFBQUEsb0JBQW9CLEVBQUNsRixDQUFDLElBQUUsMEJBQXlCQSxDQUE1QixHQUE4QkEsQ0FBQyxDQUFDa0Ysb0JBQWhDLEdBQXFELEtBQUtBLG9CQUE1UjtBQUFpVFEsVUFBQUEsa0JBQWtCLEVBQUMxRixDQUFDLElBQUUsd0JBQXVCQSxDQUExQixHQUE0QkEsQ0FBQyxDQUFDMEYsa0JBQTlCLEdBQWlELEtBQUtBO0FBQTFYLFNBQU47QUFBb1o7QUFBMXZMO0FBQUE7QUFBQSxhQUEwdkwsc0JBQWExRixDQUFiLEVBQWU7QUFBQyxZQUFHLENBQUMsS0FBS3NELGFBQUwsQ0FBbUIsSUFBSXFGLFdBQUosQ0FBZ0IsYUFBaEIsRUFBOEI7QUFBQ0MsVUFBQUEsTUFBTSxFQUFDNUksQ0FBUjtBQUFVdUUsVUFBQUEsVUFBVSxFQUFDLENBQUM7QUFBdEIsU0FBOUIsQ0FBbkIsQ0FBSixFQUFnRjtBQUFPLGFBQUtkLGNBQUwsR0FBb0IsQ0FBQyxDQUFyQjs7QUFBdUIsWUFBTXhELENBQUMsR0FBQyxLQUFLMEcscUJBQUwsRUFBUjtBQUFBLFlBQXFDbEcsQ0FBQyxHQUFDb0ksTUFBTSxDQUFDQyxNQUFQLENBQWNELE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBaUI3SSxDQUFqQixDQUFkLEVBQWtDO0FBQUM4SSxVQUFBQSxNQUFNLEVBQUM7QUFBUixTQUFsQyxDQUF2Qzs7QUFBc0YsYUFBS25GLEtBQUwsQ0FBV29GLElBQVgsQ0FBZ0J2SSxDQUFoQixHQUFtQixLQUFLaUcsTUFBTCxDQUFZekcsQ0FBWixDQUFuQixFQUFrQyxLQUFLK0YsYUFBTCxDQUFtQmhHLENBQW5CLENBQWxDO0FBQXdEO0FBQXRnTTtBQUFBO0FBQUEsYUFBc2dNLHVCQUFjQSxDQUFkLEVBQWdCO0FBQUMsWUFBRyxDQUFDLEtBQUt5RCxjQUFULEVBQXdCO0FBQU8sWUFBRyxNQUFJLEtBQUtHLEtBQUwsQ0FBV2MsTUFBbEIsRUFBeUIsT0FBTyxLQUFLLEtBQUtULFlBQUwsQ0FBa0JqRSxDQUFsQixDQUFaO0FBQWlDLGFBQUtzRCxhQUFMLENBQW1CLElBQUlxRixXQUFKLENBQWdCLG9CQUFoQixFQUFxQztBQUFDQyxVQUFBQSxNQUFNLEVBQUM1STtBQUFSLFNBQXJDLENBQW5COztBQUFxRSxZQUFNQyxDQUFDLEdBQUNELENBQUMsQ0FBQ2lKLE9BQVY7QUFBQSxZQUFrQnhJLENBQUMsR0FBQ1QsQ0FBQyxDQUFDa0osT0FBdEI7QUFBQSxZQUE4QnhJLEdBQUMsR0FBQyxLQUFLLENBQUwsS0FBU1YsQ0FBQyxDQUFDZSxRQUFYLEdBQW9CZixDQUFDLENBQUNlLFFBQXRCLEdBQStCLEtBQUssQ0FBTCxLQUFTZixDQUFDLENBQUNtSixLQUFYLEdBQWlCbkosQ0FBQyxDQUFDbUosS0FBbkIsR0FBeUIsQ0FBeEY7QUFBQSxZQUEwRjVILENBQUMsR0FBQyxLQUFLNkgsWUFBTCxDQUFrQm5KLENBQWxCLEVBQW9CUSxDQUFwQixFQUFzQkMsR0FBdEIsQ0FBNUY7QUFBQSxZQUFxSGMsQ0FBQyxHQUFDLEtBQUtvQyxLQUFMLENBQVcsS0FBS0EsS0FBTCxDQUFXYyxNQUFYLEdBQWtCLENBQTdCLENBQXZIO0FBQUEsWUFBdUoxQyxDQUFDLEdBQUNSLENBQUMsQ0FBQ3VILE1BQTNKO0FBQUEsWUFBa0t6RyxDQUFDLEdBQUNOLENBQUMsQ0FBQzBDLE1BQUYsR0FBUyxDQUFULElBQVkxQyxDQUFDLENBQUNBLENBQUMsQ0FBQzBDLE1BQUYsR0FBUyxDQUFWLENBQWpMO0FBQUEsWUFBOExuQyxDQUFDLEdBQUMsQ0FBQyxDQUFDRCxDQUFGLElBQUtmLENBQUMsQ0FBQ0QsVUFBRixDQUFhZ0IsQ0FBYixLQUFpQixLQUFLZ0QsV0FBM047QUFBQSxZQUF1TzlDLENBQUMsR0FBQyxLQUFLbUUscUJBQUwsQ0FBMkJuRixDQUEzQixDQUF6Tzs7QUFBdVEsWUFBRyxDQUFDYyxDQUFELElBQUksQ0FBQ0EsQ0FBTCxJQUFRLENBQUNDLENBQVosRUFBYztBQUFDLGNBQU12QyxHQUFDLEdBQUMsS0FBS3FKLFNBQUwsQ0FBZTlILENBQWYsRUFBaUJpQixDQUFqQixDQUFSOztBQUE0QkYsVUFBQUEsQ0FBQyxHQUFDdEMsR0FBQyxJQUFFLEtBQUt1SSxVQUFMLENBQWdCdkksR0FBaEIsRUFBa0J3QyxDQUFsQixDQUFKLEdBQXlCLEtBQUtpRyxRQUFMLENBQWNsSCxDQUFkLEVBQWdCaUIsQ0FBaEIsQ0FBMUIsRUFBNkNSLENBQUMsQ0FBQ2dILElBQUYsQ0FBTztBQUFDaEksWUFBQUEsSUFBSSxFQUFDTyxDQUFDLENBQUNQLElBQVI7QUFBYUgsWUFBQUEsQ0FBQyxFQUFDVSxDQUFDLENBQUNWLENBQWpCO0FBQW1CQyxZQUFBQSxDQUFDLEVBQUNTLENBQUMsQ0FBQ1QsQ0FBdkI7QUFBeUJDLFlBQUFBLFFBQVEsRUFBQ1EsQ0FBQyxDQUFDUjtBQUFwQyxXQUFQLENBQTdDO0FBQW1HOztBQUFBLGFBQUt1QyxhQUFMLENBQW1CLElBQUlxRixXQUFKLENBQWdCLG1CQUFoQixFQUFvQztBQUFDQyxVQUFBQSxNQUFNLEVBQUM1STtBQUFSLFNBQXBDLENBQW5CO0FBQW9FO0FBQTlvTjtBQUFBO0FBQUEsYUFBOG9OLG9CQUFXQSxDQUFYLEVBQWE7QUFBQyxhQUFLeUQsY0FBTCxLQUFzQixLQUFLdUMsYUFBTCxDQUFtQmhHLENBQW5CLEdBQXNCLEtBQUt5RCxjQUFMLEdBQW9CLENBQUMsQ0FBM0MsRUFBNkMsS0FBS0gsYUFBTCxDQUFtQixJQUFJcUYsV0FBSixDQUFnQixXQUFoQixFQUE0QjtBQUFDQyxVQUFBQSxNQUFNLEVBQUM1STtBQUFSLFNBQTVCLENBQW5CLENBQW5FO0FBQWdJO0FBQTV4TjtBQUFBO0FBQUEsYUFBNHhOLGdDQUFzQjtBQUFDLGFBQUt5RCxjQUFMLEdBQW9CLENBQUMsQ0FBckIsRUFBdUIsS0FBS0QsTUFBTCxDQUFZSCxnQkFBWixDQUE2QixhQUE3QixFQUEyQyxLQUFLMEIsbUJBQWhELENBQXZCLEVBQTRGLEtBQUt2QixNQUFMLENBQVlILGdCQUFaLENBQTZCLGFBQTdCLEVBQTJDLEtBQUsyQixrQkFBaEQsQ0FBNUYsRUFBZ0ssS0FBS3hCLE1BQUwsQ0FBWTZFLGFBQVosQ0FBMEJoRixnQkFBMUIsQ0FBMkMsV0FBM0MsRUFBdUQsS0FBSzRCLGlCQUE1RCxDQUFoSztBQUErTztBQUFsaU87QUFBQTtBQUFBLGFBQWtpTyw4QkFBb0I7QUFBQyxhQUFLeEIsY0FBTCxHQUFvQixDQUFDLENBQXJCLEVBQXVCLEtBQUtELE1BQUwsQ0FBWUgsZ0JBQVosQ0FBNkIsV0FBN0IsRUFBeUMsS0FBS1UsZ0JBQTlDLENBQXZCLEVBQXVGLEtBQUtQLE1BQUwsQ0FBWUgsZ0JBQVosQ0FBNkIsV0FBN0IsRUFBeUMsS0FBS2EsZ0JBQTlDLENBQXZGLEVBQXVKLEtBQUtWLE1BQUwsQ0FBWTZFLGFBQVosQ0FBMEJoRixnQkFBMUIsQ0FBMkMsU0FBM0MsRUFBcUQsS0FBS2UsY0FBMUQsQ0FBdko7QUFBaU87QUFBeHhPO0FBQUE7QUFBQSxhQUF3eE8sOEJBQW9CO0FBQUMsYUFBS1osTUFBTCxDQUFZSCxnQkFBWixDQUE2QixZQUE3QixFQUEwQyxLQUFLaUIsaUJBQS9DLEdBQWtFLEtBQUtkLE1BQUwsQ0FBWUgsZ0JBQVosQ0FBNkIsV0FBN0IsRUFBeUMsS0FBS3VCLGdCQUE5QyxDQUFsRSxFQUFrSSxLQUFLcEIsTUFBTCxDQUFZSCxnQkFBWixDQUE2QixVQUE3QixFQUF3QyxLQUFLd0IsZUFBN0MsQ0FBbEk7QUFBZ007QUFBNytPO0FBQUE7QUFBQSxhQUE2K08sZ0JBQU83RSxDQUFQLEVBQVM7QUFBQyxhQUFLMkQsV0FBTCxHQUFpQixFQUFqQixFQUFvQixLQUFLRSxhQUFMLEdBQW1CLENBQXZDLEVBQXlDLEtBQUtDLFVBQUwsR0FBZ0IsQ0FBQzlELENBQUMsQ0FBQ21GLFFBQUYsR0FBV25GLENBQUMsQ0FBQ29GLFFBQWQsSUFBd0IsQ0FBakYsRUFBbUYsS0FBS2EsSUFBTCxDQUFVSSxTQUFWLEdBQW9CckcsQ0FBQyxDQUFDd0YsUUFBekcsRUFBa0gsS0FBS1MsSUFBTCxDQUFVcUQsd0JBQVYsR0FBbUN0SixDQUFDLENBQUMwRixrQkFBdko7QUFBMEs7QUFBanFQO0FBQUE7QUFBQSxhQUFpcVAsc0JBQWF6RixDQUFiLEVBQWVRLENBQWYsRUFBaUJDLEdBQWpCLEVBQW1CO0FBQUMsWUFBTWEsQ0FBQyxHQUFDLEtBQUtpQyxNQUFMLENBQVkrRixxQkFBWixFQUFSO0FBQTRDLGVBQU8sSUFBSXZKLENBQUosQ0FBTUMsQ0FBQyxHQUFDc0IsQ0FBQyxDQUFDaUksSUFBVixFQUFlL0ksQ0FBQyxHQUFDYyxDQUFDLENBQUNrSSxHQUFuQixFQUF1Qi9JLEdBQXZCLEVBQTBCLElBQUlPLElBQUosRUFBRCxDQUFXeUksT0FBWCxFQUF6QixDQUFQO0FBQXNEO0FBQXZ4UDtBQUFBO0FBQUEsYUFBdXhQLG1CQUFVMUosQ0FBVixFQUFZUyxDQUFaLEVBQWM7QUFBQyxZQUFrQkMsR0FBbEIsR0FBcUIsSUFBckIsQ0FBTWlELFdBQU47O0FBQTBCLFlBQUdqRCxHQUFDLENBQUNzSSxJQUFGLENBQU9oSixDQUFQLEdBQVVVLEdBQUMsQ0FBQ2dFLE1BQUYsR0FBUyxDQUF0QixFQUF3QjtBQUFDLGdCQUFJaEUsR0FBQyxDQUFDZ0UsTUFBTixJQUFjaEUsR0FBQyxDQUFDaUosT0FBRixDQUFVakosR0FBQyxDQUFDLENBQUQsQ0FBWCxDQUFkOztBQUE4QixjQUFNVixHQUFDLEdBQUMsS0FBSzRKLHFCQUFMLENBQTJCbEosR0FBQyxDQUFDLENBQUQsQ0FBNUIsRUFBZ0NBLEdBQUMsQ0FBQyxDQUFELENBQWpDLEVBQXFDRCxDQUFyQyxDQUFSO0FBQUEsY0FBZ0RjLENBQUMsR0FBQ3RCLENBQUMsQ0FBQzRKLFVBQUYsQ0FBYW5KLEdBQWIsRUFBZVYsR0FBZixDQUFsRDs7QUFBb0UsaUJBQU9VLEdBQUMsQ0FBQ29KLEtBQUYsSUFBVXZJLENBQWpCO0FBQW1COztBQUFBLGVBQU8sSUFBUDtBQUFZO0FBQTE5UDtBQUFBO0FBQUEsYUFBMDlQLCtCQUFzQnZCLENBQXRCLEVBQXdCQyxDQUF4QixFQUEwQlEsQ0FBMUIsRUFBNEI7QUFBQyxZQUFNQyxHQUFDLEdBQUNELENBQUMsQ0FBQ3lFLG9CQUFGLEdBQXVCakYsQ0FBQyxDQUFDOEosWUFBRixDQUFlL0osQ0FBZixDQUF2QixHQUF5QyxDQUFDLElBQUVTLENBQUMsQ0FBQ3lFLG9CQUFMLElBQTJCLEtBQUtyQixhQUFqRjtBQUFBLFlBQStGdEMsQ0FBQyxHQUFDLEtBQUt5SSxZQUFMLENBQWtCdEosR0FBbEIsRUFBb0JELENBQXBCLENBQWpHO0FBQUEsWUFBd0hlLENBQUMsR0FBQztBQUFDYSxVQUFBQSxHQUFHLEVBQUNkLENBQUw7QUFBT2EsVUFBQUEsS0FBSyxFQUFDLEtBQUswQjtBQUFsQixTQUExSDs7QUFBd0osZUFBTyxLQUFLRCxhQUFMLEdBQW1CbkQsR0FBbkIsRUFBcUIsS0FBS29ELFVBQUwsR0FBZ0J2QyxDQUFyQyxFQUF1Q0MsQ0FBOUM7QUFBZ0Q7QUFBL3JRO0FBQUE7QUFBQSxhQUErclEsc0JBQWF4QixDQUFiLEVBQWVDLENBQWYsRUFBaUI7QUFBQyxlQUFPa0IsSUFBSSxDQUFDOEksR0FBTCxDQUFTaEssQ0FBQyxDQUFDbUYsUUFBRixJQUFZcEYsQ0FBQyxHQUFDLENBQWQsQ0FBVCxFQUEwQkMsQ0FBQyxDQUFDa0YsUUFBNUIsQ0FBUDtBQUE2QztBQUE5dlE7QUFBQTtBQUFBLGFBQTh2USwyQkFBa0JuRixDQUFsQixFQUFvQkMsQ0FBcEIsRUFBc0JRLENBQXRCLEVBQXdCO0FBQUMsWUFBTUMsR0FBQyxHQUFDLEtBQUt1RixJQUFiO0FBQWtCdkYsUUFBQUEsR0FBQyxDQUFDd0osTUFBRixDQUFTbEssQ0FBVCxFQUFXQyxDQUFYLEdBQWNTLEdBQUMsQ0FBQ3lKLEdBQUYsQ0FBTW5LLENBQU4sRUFBUUMsQ0FBUixFQUFVUSxDQUFWLEVBQVksQ0FBWixFQUFjLElBQUVVLElBQUksQ0FBQ2lKLEVBQXJCLEVBQXdCLENBQUMsQ0FBekIsQ0FBZCxFQUEwQyxLQUFLMUcsUUFBTCxHQUFjLENBQUMsQ0FBekQ7QUFBMkQ7QUFBcDJRO0FBQUE7QUFBQSxhQUFvMlEsb0JBQVcxRCxDQUFYLEVBQWFDLENBQWIsRUFBZTtBQUFDLFlBQU1RLENBQUMsR0FBQyxLQUFLd0YsSUFBYjtBQUFBLFlBQWtCdkYsR0FBQyxHQUFDVixDQUFDLENBQUM4QixRQUFGLEdBQVc5QixDQUFDLENBQUM2QixVQUFqQztBQUFBLFlBQTRDTixDQUFDLEdBQUMsSUFBRUosSUFBSSxDQUFDa0osSUFBTCxDQUFVckssQ0FBQyxDQUFDMEUsTUFBRixFQUFWLENBQWhEOztBQUFzRWpFLFFBQUFBLENBQUMsQ0FBQzZKLFNBQUYsSUFBYzdKLENBQUMsQ0FBQzRGLFNBQUYsR0FBWXBHLENBQUMsQ0FBQ3VGLFFBQTVCOztBQUFxQyxhQUFJLElBQUkvRSxHQUFDLEdBQUMsQ0FBVixFQUFZQSxHQUFDLEdBQUNjLENBQWQsRUFBZ0JkLEdBQUMsSUFBRSxDQUFuQixFQUFxQjtBQUFDLGNBQU1lLENBQUMsR0FBQ2YsR0FBQyxHQUFDYyxDQUFWO0FBQUEsY0FBWVMsQ0FBQyxHQUFDUixDQUFDLEdBQUNBLENBQWhCO0FBQUEsY0FBa0JjLENBQUMsR0FBQ04sQ0FBQyxHQUFDUixDQUF0QjtBQUFBLGNBQXdCZSxDQUFDLEdBQUMsSUFBRWYsQ0FBNUI7QUFBQSxjQUE4QmdCLENBQUMsR0FBQ0QsQ0FBQyxHQUFDQSxDQUFsQztBQUFBLGNBQW9DRSxDQUFDLEdBQUNELENBQUMsR0FBQ0QsQ0FBeEM7QUFBMEMsY0FBSUcsQ0FBQyxHQUFDRCxDQUFDLEdBQUN6QyxDQUFDLENBQUN5QixVQUFGLENBQWFaLENBQXJCO0FBQXVCNkIsVUFBQUEsQ0FBQyxJQUFFLElBQUVGLENBQUYsR0FBSWhCLENBQUosR0FBTXhCLENBQUMsQ0FBQzJCLFFBQUYsQ0FBV2QsQ0FBcEIsRUFBc0I2QixDQUFDLElBQUUsSUFBRUgsQ0FBRixHQUFJUCxDQUFKLEdBQU1oQyxDQUFDLENBQUMwQixRQUFGLENBQVdiLENBQTFDLEVBQTRDNkIsQ0FBQyxJQUFFSixDQUFDLEdBQUN0QyxDQUFDLENBQUM0QixRQUFGLENBQVdmLENBQTVEO0FBQThELGNBQUk4QixDQUFDLEdBQUNGLENBQUMsR0FBQ3pDLENBQUMsQ0FBQ3lCLFVBQUYsQ0FBYVgsQ0FBckI7QUFBdUI2QixVQUFBQSxDQUFDLElBQUUsSUFBRUgsQ0FBRixHQUFJaEIsQ0FBSixHQUFNeEIsQ0FBQyxDQUFDMkIsUUFBRixDQUFXYixDQUFwQixFQUFzQjZCLENBQUMsSUFBRSxJQUFFSixDQUFGLEdBQUlQLENBQUosR0FBTWhDLENBQUMsQ0FBQzBCLFFBQUYsQ0FBV1osQ0FBMUMsRUFBNEM2QixDQUFDLElBQUVMLENBQUMsR0FBQ3RDLENBQUMsQ0FBQzRCLFFBQUYsQ0FBV2QsQ0FBNUQ7QUFBOEQsY0FBTThCLENBQUMsR0FBQ3pCLElBQUksQ0FBQ29KLEdBQUwsQ0FBU3ZLLENBQUMsQ0FBQzZCLFVBQUYsR0FBYVMsQ0FBQyxHQUFDNUIsR0FBeEIsRUFBMEJULENBQUMsQ0FBQ21GLFFBQTVCLENBQVI7O0FBQThDLGVBQUtvRixpQkFBTCxDQUF1QjlILENBQXZCLEVBQXlCQyxDQUF6QixFQUEyQkMsQ0FBM0I7QUFBOEI7O0FBQUFuQyxRQUFBQSxDQUFDLENBQUNnSyxTQUFGLElBQWNoSyxDQUFDLENBQUNpSyxJQUFGLEVBQWQ7QUFBdUI7QUFBNXlSO0FBQUE7QUFBQSxhQUE0eVIsa0JBQVMxSyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLFlBQU1RLENBQUMsR0FBQyxLQUFLd0YsSUFBYjtBQUFBLFlBQWtCdkYsSUFBQyxHQUFDVCxDQUFDLENBQUNzRixPQUFGLEdBQVUsQ0FBVixHQUFZdEYsQ0FBQyxDQUFDc0YsT0FBZCxHQUFzQixDQUFDdEYsQ0FBQyxDQUFDa0YsUUFBRixHQUFXbEYsQ0FBQyxDQUFDbUYsUUFBZCxJQUF3QixDQUFsRTs7QUFBb0UzRSxRQUFBQSxDQUFDLENBQUM2SixTQUFGLElBQWMsS0FBS0UsaUJBQUwsQ0FBdUJ4SyxDQUFDLENBQUNhLENBQXpCLEVBQTJCYixDQUFDLENBQUNjLENBQTdCLEVBQStCSixJQUEvQixDQUFkLEVBQWdERCxDQUFDLENBQUNnSyxTQUFGLEVBQWhELEVBQThEaEssQ0FBQyxDQUFDNEYsU0FBRixHQUFZcEcsQ0FBQyxDQUFDdUYsUUFBNUUsRUFBcUYvRSxDQUFDLENBQUNpSyxJQUFGLEVBQXJGO0FBQThGO0FBQTU5UjtBQUFBO0FBQUEsYUFBNDlSLG1CQUFVekssQ0FBVixFQUFZUSxDQUFaLEVBQWNDLElBQWQsRUFBZ0I7QUFBQSxtREFBZ0JULENBQWhCO0FBQUE7O0FBQUE7QUFBQyw4REFBaUI7QUFBQSxnQkFBUHNCLENBQU87O0FBQU0sZ0JBQVF0QixHQUFSLEdBQVdzQixDQUFYLENBQUN3SCxNQUFEO0FBQUEsZ0JBQWF2SCxDQUFiLEdBQWUsS0FBS21GLHFCQUFMLENBQTJCcEYsQ0FBM0IsQ0FBZjs7QUFBNkMsZ0JBQUd0QixHQUFDLENBQUN5RSxNQUFGLEdBQVMsQ0FBWixFQUFjLEtBQUksSUFBSWhFLElBQUMsR0FBQyxDQUFWLEVBQVlBLElBQUMsR0FBQ1QsR0FBQyxDQUFDeUUsTUFBaEIsRUFBdUJoRSxJQUFDLElBQUUsQ0FBMUIsRUFBNEI7QUFBQyxrQkFBTWEsR0FBQyxHQUFDdEIsR0FBQyxDQUFDUyxJQUFELENBQVQ7QUFBQSxrQkFBYXNCLENBQUMsR0FBQyxJQUFJaEMsQ0FBSixDQUFNdUIsR0FBQyxDQUFDVixDQUFSLEVBQVVVLEdBQUMsQ0FBQ1QsQ0FBWixFQUFjUyxHQUFDLENBQUNSLFFBQWhCLEVBQXlCUSxHQUFDLENBQUNQLElBQTNCLENBQWY7QUFBZ0Qsb0JBQUlOLElBQUosSUFBTyxLQUFLZ0csTUFBTCxDQUFZbEYsQ0FBWixDQUFQOztBQUFzQixrQkFBTWMsQ0FBQyxHQUFDLEtBQUsrRyxTQUFMLENBQWVySCxDQUFmLEVBQWlCUixDQUFqQixDQUFSOztBQUE0QmMsY0FBQUEsQ0FBQyxJQUFFN0IsQ0FBQyxDQUFDNkIsQ0FBRCxFQUFHZCxDQUFILENBQUo7QUFBVSxhQUF2SixNQUE0SixLQUFLa0YsTUFBTCxDQUFZbEYsQ0FBWixHQUFlZCxJQUFDLENBQUNULEdBQUMsQ0FBQyxDQUFELENBQUYsRUFBTXVCLENBQU4sQ0FBaEI7QUFBeUI7QUFBMVA7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUEyUDtBQUF2dVM7QUFBQTtBQUFBLGFBQXV1UyxpQkFBdUM7QUFBQSx3RkFBSCxFQUFHO0FBQUEsMENBQWhDbUosc0JBQWdDO0FBQUEsWUFBVDNLLENBQVMsc0NBQVAsQ0FBQyxDQUFNOztBQUFDLFlBQU1DLENBQUMsR0FBQyxLQUFLMkQsS0FBYjtBQUFBLFlBQW1CbkQsQ0FBQyxHQUFDVSxJQUFJLENBQUM4SSxHQUFMLENBQVNwRSxNQUFNLENBQUNrQixnQkFBUCxJQUF5QixDQUFsQyxFQUFvQyxDQUFwQyxDQUFyQjtBQUFBLFlBQTREckcsSUFBQyxHQUFDLEtBQUs4QyxNQUFMLENBQVkrQyxLQUFaLEdBQWtCOUYsQ0FBaEY7QUFBQSxZQUFrRmMsQ0FBQyxHQUFDLEtBQUtpQyxNQUFMLENBQVlnRCxNQUFaLEdBQW1CL0YsQ0FBdkc7QUFBQSxZQUF5R2UsQ0FBQyxHQUFDNEIsUUFBUSxDQUFDd0gsZUFBVCxDQUF5Qiw0QkFBekIsRUFBc0QsS0FBdEQsQ0FBM0c7O0FBQXdLLFlBQUdwSixDQUFDLENBQUNxSixZQUFGLENBQWUsT0FBZixFQUF1Qiw0QkFBdkIsR0FBcURySixDQUFDLENBQUNxSixZQUFGLENBQWUsYUFBZixFQUE2Qiw4QkFBN0IsQ0FBckQsRUFBa0hySixDQUFDLENBQUNxSixZQUFGLENBQWUsU0FBZixnQkFBZ0NuSyxJQUFoQyxjQUFxQ2EsQ0FBckMsRUFBbEgsRUFBNEpDLENBQUMsQ0FBQ3FKLFlBQUYsQ0FBZSxPQUFmLEVBQXVCbkssSUFBQyxDQUFDb0ssUUFBRixFQUF2QixDQUE1SixFQUFpTXRKLENBQUMsQ0FBQ3FKLFlBQUYsQ0FBZSxRQUFmLEVBQXdCdEosQ0FBQyxDQUFDdUosUUFBRixFQUF4QixDQUFqTSxFQUF1TzlLLENBQUMsSUFBRSxLQUFLeUYsZUFBbFAsRUFBa1E7QUFBQyxjQUFNekYsR0FBQyxHQUFDb0QsUUFBUSxDQUFDMkgsYUFBVCxDQUF1QixNQUF2QixDQUFSOztBQUF1Qy9LLFVBQUFBLEdBQUMsQ0FBQzZLLFlBQUYsQ0FBZSxPQUFmLEVBQXVCLE1BQXZCLEdBQStCN0ssR0FBQyxDQUFDNkssWUFBRixDQUFlLFFBQWYsRUFBd0IsTUFBeEIsQ0FBL0IsRUFBK0Q3SyxHQUFDLENBQUM2SyxZQUFGLENBQWUsTUFBZixFQUFzQixLQUFLcEYsZUFBM0IsQ0FBL0QsRUFBMkdqRSxDQUFDLENBQUN3SixXQUFGLENBQWNoTCxHQUFkLENBQTNHO0FBQTRIOztBQUFBLGVBQU8sS0FBS3NJLFNBQUwsQ0FBZXJJLENBQWYsRUFBa0IsVUFBQ0QsQ0FBRCxTQUFrQjtBQUFBLGNBQUxDLENBQUssU0FBZHVGLFFBQWM7QUFBQyxjQUFNL0UsQ0FBQyxHQUFDMkMsUUFBUSxDQUFDMkgsYUFBVCxDQUF1QixNQUF2QixDQUFSOztBQUF1QyxjQUFHLEVBQUVwSyxLQUFLLENBQUNYLENBQUMsQ0FBQzJCLFFBQUYsQ0FBV2QsQ0FBWixDQUFMLElBQXFCRixLQUFLLENBQUNYLENBQUMsQ0FBQzJCLFFBQUYsQ0FBV2IsQ0FBWixDQUExQixJQUEwQ0gsS0FBSyxDQUFDWCxDQUFDLENBQUMwQixRQUFGLENBQVdiLENBQVosQ0FBL0MsSUFBK0RGLEtBQUssQ0FBQ1gsQ0FBQyxDQUFDMEIsUUFBRixDQUFXWixDQUFaLENBQXRFLENBQUgsRUFBeUY7QUFBQyxnQkFBTUosSUFBQyxlQUFNVixDQUFDLENBQUN5QixVQUFGLENBQWFaLENBQWIsQ0FBZW9LLE9BQWYsQ0FBdUIsQ0FBdkIsQ0FBTixjQUFtQ2pMLENBQUMsQ0FBQ3lCLFVBQUYsQ0FBYVgsQ0FBYixDQUFlbUssT0FBZixDQUF1QixDQUF2QixDQUFuQyxnQkFBa0VqTCxDQUFDLENBQUMyQixRQUFGLENBQVdkLENBQVgsQ0FBYW9LLE9BQWIsQ0FBcUIsQ0FBckIsQ0FBbEUsY0FBNkZqTCxDQUFDLENBQUMyQixRQUFGLENBQVdiLENBQVgsQ0FBYW1LLE9BQWIsQ0FBcUIsQ0FBckIsQ0FBN0YsY0FBd0hqTCxDQUFDLENBQUMwQixRQUFGLENBQVdiLENBQVgsQ0FBYW9LLE9BQWIsQ0FBcUIsQ0FBckIsQ0FBeEgsY0FBbUpqTCxDQUFDLENBQUMwQixRQUFGLENBQVdaLENBQVgsQ0FBYW1LLE9BQWIsQ0FBcUIsQ0FBckIsQ0FBbkosY0FBOEtqTCxDQUFDLENBQUM0QixRQUFGLENBQVdmLENBQVgsQ0FBYW9LLE9BQWIsQ0FBcUIsQ0FBckIsQ0FBOUssY0FBeU1qTCxDQUFDLENBQUM0QixRQUFGLENBQVdkLENBQVgsQ0FBYW1LLE9BQWIsQ0FBcUIsQ0FBckIsQ0FBek0sQ0FBUDs7QUFBME94SyxZQUFBQSxDQUFDLENBQUNvSyxZQUFGLENBQWUsR0FBZixFQUFtQm5LLElBQW5CLEdBQXNCRCxDQUFDLENBQUNvSyxZQUFGLENBQWUsY0FBZixFQUE4QixDQUFDLE9BQUs3SyxDQUFDLENBQUM4QixRQUFSLEVBQWtCbUosT0FBbEIsQ0FBMEIsQ0FBMUIsQ0FBOUIsQ0FBdEIsRUFBa0Z4SyxDQUFDLENBQUNvSyxZQUFGLENBQWUsUUFBZixFQUF3QjVLLENBQXhCLENBQWxGLEVBQTZHUSxDQUFDLENBQUNvSyxZQUFGLENBQWUsTUFBZixFQUFzQixNQUF0QixDQUE3RyxFQUEySXBLLENBQUMsQ0FBQ29LLFlBQUYsQ0FBZSxnQkFBZixFQUFnQyxPQUFoQyxDQUEzSSxFQUFvTHJKLENBQUMsQ0FBQ3dKLFdBQUYsQ0FBY3ZLLENBQWQsQ0FBcEw7QUFBcU07QUFBQyxTQUF0bEIsRUFBeWxCLFVBQUNULENBQUQsU0FBa0Q7QUFBQSxjQUFyQ0MsQ0FBcUMsU0FBOUN1RixRQUE4QztBQUFBLGNBQTNCL0UsQ0FBMkIsU0FBbkM4RSxPQUFtQztBQUFBLGNBQWhCN0UsSUFBZ0IsU0FBekJ5RSxRQUF5QjtBQUFBLGNBQUw1RCxDQUFLLFNBQWQ2RCxRQUFjO0FBQUMsY0FBTXBELENBQUMsR0FBQ29CLFFBQVEsQ0FBQzJILGFBQVQsQ0FBdUIsUUFBdkIsQ0FBUjtBQUFBLGNBQXlDekksQ0FBQyxHQUFDN0IsQ0FBQyxHQUFDLENBQUYsR0FBSUEsQ0FBSixHQUFNLENBQUNDLElBQUMsR0FBQ2EsQ0FBSCxJQUFNLENBQXZEO0FBQXlEUyxVQUFBQSxDQUFDLENBQUM2SSxZQUFGLENBQWUsR0FBZixFQUFtQnZJLENBQUMsQ0FBQ3dJLFFBQUYsRUFBbkIsR0FBaUM5SSxDQUFDLENBQUM2SSxZQUFGLENBQWUsSUFBZixFQUFvQjdLLENBQUMsQ0FBQ2EsQ0FBRixDQUFJaUssUUFBSixFQUFwQixDQUFqQyxFQUFxRTlJLENBQUMsQ0FBQzZJLFlBQUYsQ0FBZSxJQUFmLEVBQW9CN0ssQ0FBQyxDQUFDYyxDQUFGLENBQUlnSyxRQUFKLEVBQXBCLENBQXJFLEVBQXlHOUksQ0FBQyxDQUFDNkksWUFBRixDQUFlLE1BQWYsRUFBc0I1SyxDQUF0QixDQUF6RyxFQUFrSXVCLENBQUMsQ0FBQ3dKLFdBQUYsQ0FBY2hKLENBQWQsQ0FBbEk7QUFBbUosU0FBeDFCLEdBQTIxQlIsQ0FBQyxDQUFDMEosU0FBcDJCO0FBQTgyQjtBQUEzc1Y7O0FBQUE7QUFBQSxJQUE4bUR6SyxDQUE5bUQ7O0FBQTRzVixTQUFPQyxDQUFQO0FBQVMsQ0FBbjdWLENBQUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9zaWduYXR1cmVfcGFkLm1pbi5qcz9kZTYwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBTaWduYXR1cmUgUGFkIHY0LjEuNyB8IGh0dHBzOi8vZ2l0aHViLmNvbS9zemltZWsvc2lnbmF0dXJlX3BhZFxyXG4gKiAoYykgMjAyMyBTenltb24gTm93YWsgfCBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcclxuICovXHJcbiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuU2lnbmF0dXJlUGFkPWUoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtjbGFzcyB0e2NvbnN0cnVjdG9yKHQsZSxpLHMpe2lmKGlzTmFOKHQpfHxpc05hTihlKSl0aHJvdyBuZXcgRXJyb3IoYFBvaW50IGlzIGludmFsaWQ6ICgke3R9LCAke2V9KWApO3RoaXMueD0rdCx0aGlzLnk9K2UsdGhpcy5wcmVzc3VyZT1pfHwwLHRoaXMudGltZT1zfHxEYXRlLm5vdygpfWRpc3RhbmNlVG8odCl7cmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyh0aGlzLngtdC54LDIpK01hdGgucG93KHRoaXMueS10LnksMikpfWVxdWFscyh0KXtyZXR1cm4gdGhpcy54PT09dC54JiZ0aGlzLnk9PT10LnkmJnRoaXMucHJlc3N1cmU9PT10LnByZXNzdXJlJiZ0aGlzLnRpbWU9PT10LnRpbWV9dmVsb2NpdHlGcm9tKHQpe3JldHVybiB0aGlzLnRpbWUhPT10LnRpbWU/dGhpcy5kaXN0YW5jZVRvKHQpLyh0aGlzLnRpbWUtdC50aW1lKTowfX1jbGFzcyBle3N0YXRpYyBmcm9tUG9pbnRzKHQsaSl7Y29uc3Qgcz10aGlzLmNhbGN1bGF0ZUNvbnRyb2xQb2ludHModFswXSx0WzFdLHRbMl0pLmMyLG49dGhpcy5jYWxjdWxhdGVDb250cm9sUG9pbnRzKHRbMV0sdFsyXSx0WzNdKS5jMTtyZXR1cm4gbmV3IGUodFsxXSxzLG4sdFsyXSxpLnN0YXJ0LGkuZW5kKX1zdGF0aWMgY2FsY3VsYXRlQ29udHJvbFBvaW50cyhlLGkscyl7Y29uc3Qgbj1lLngtaS54LG89ZS55LWkueSxoPWkueC1zLngscj1pLnktcy55LGE9KGUueCtpLngpLzIsYz0oZS55K2kueSkvMixkPShpLngrcy54KS8yLGw9KGkueStzLnkpLzIsdT1NYXRoLnNxcnQobipuK28qbyksdj1NYXRoLnNxcnQoaCpoK3IqciksXz12Lyh1K3YpLHA9ZCsoYS1kKSpfLG09bCsoYy1sKSpfLGc9aS54LXAsdz1pLnktbTtyZXR1cm57YzE6bmV3IHQoYStnLGMrdyksYzI6bmV3IHQoZCtnLGwrdyl9fWNvbnN0cnVjdG9yKHQsZSxpLHMsbixvKXt0aGlzLnN0YXJ0UG9pbnQ9dCx0aGlzLmNvbnRyb2wyPWUsdGhpcy5jb250cm9sMT1pLHRoaXMuZW5kUG9pbnQ9cyx0aGlzLnN0YXJ0V2lkdGg9bix0aGlzLmVuZFdpZHRoPW99bGVuZ3RoKCl7bGV0IHQsZSxpPTA7Zm9yKGxldCBzPTA7czw9MTA7cys9MSl7Y29uc3Qgbj1zLzEwLG89dGhpcy5wb2ludChuLHRoaXMuc3RhcnRQb2ludC54LHRoaXMuY29udHJvbDEueCx0aGlzLmNvbnRyb2wyLngsdGhpcy5lbmRQb2ludC54KSxoPXRoaXMucG9pbnQobix0aGlzLnN0YXJ0UG9pbnQueSx0aGlzLmNvbnRyb2wxLnksdGhpcy5jb250cm9sMi55LHRoaXMuZW5kUG9pbnQueSk7aWYocz4wKXtjb25zdCBzPW8tdCxuPWgtZTtpKz1NYXRoLnNxcnQocypzK24qbil9dD1vLGU9aH1yZXR1cm4gaX1wb2ludCh0LGUsaSxzLG4pe3JldHVybiBlKigxLXQpKigxLXQpKigxLXQpKzMqaSooMS10KSooMS10KSp0KzMqcyooMS10KSp0KnQrbip0KnQqdH19Y2xhc3MgaXtjb25zdHJ1Y3Rvcigpe3RyeXt0aGlzLl9ldD1uZXcgRXZlbnRUYXJnZXR9Y2F0Y2godCl7dGhpcy5fZXQ9ZG9jdW1lbnR9fWFkZEV2ZW50TGlzdGVuZXIodCxlLGkpe3RoaXMuX2V0LmFkZEV2ZW50TGlzdGVuZXIodCxlLGkpfWRpc3BhdGNoRXZlbnQodCl7cmV0dXJuIHRoaXMuX2V0LmRpc3BhdGNoRXZlbnQodCl9cmVtb3ZlRXZlbnRMaXN0ZW5lcih0LGUsaSl7dGhpcy5fZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LGUsaSl9fWNsYXNzIHMgZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKHQsZT17fSl7c3VwZXIoKSx0aGlzLmNhbnZhcz10LHRoaXMuX2RyYXdpbmdTdHJva2U9ITEsdGhpcy5faXNFbXB0eT0hMCx0aGlzLl9sYXN0UG9pbnRzPVtdLHRoaXMuX2RhdGE9W10sdGhpcy5fbGFzdFZlbG9jaXR5PTAsdGhpcy5fbGFzdFdpZHRoPTAsdGhpcy5faGFuZGxlTW91c2VEb3duPXQ9PnsxPT09dC5idXR0b25zJiZ0aGlzLl9zdHJva2VCZWdpbih0KX0sdGhpcy5faGFuZGxlTW91c2VNb3ZlPXQ9Pnt0aGlzLl9zdHJva2VNb3ZlVXBkYXRlKHQpfSx0aGlzLl9oYW5kbGVNb3VzZVVwPXQ9PnsxPT09dC5idXR0b25zJiZ0aGlzLl9zdHJva2VFbmQodCl9LHRoaXMuX2hhbmRsZVRvdWNoU3RhcnQ9dD0+e2lmKHQuY2FuY2VsYWJsZSYmdC5wcmV2ZW50RGVmYXVsdCgpLDE9PT10LnRhcmdldFRvdWNoZXMubGVuZ3RoKXtjb25zdCBlPXQuY2hhbmdlZFRvdWNoZXNbMF07dGhpcy5fc3Ryb2tlQmVnaW4oZSl9fSx0aGlzLl9oYW5kbGVUb3VjaE1vdmU9dD0+e3QuY2FuY2VsYWJsZSYmdC5wcmV2ZW50RGVmYXVsdCgpO2NvbnN0IGU9dC50YXJnZXRUb3VjaGVzWzBdO3RoaXMuX3N0cm9rZU1vdmVVcGRhdGUoZSl9LHRoaXMuX2hhbmRsZVRvdWNoRW5kPXQ9PntpZih0LnRhcmdldD09PXRoaXMuY2FudmFzKXt0LmNhbmNlbGFibGUmJnQucHJldmVudERlZmF1bHQoKTtjb25zdCBlPXQuY2hhbmdlZFRvdWNoZXNbMF07dGhpcy5fc3Ryb2tlRW5kKGUpfX0sdGhpcy5faGFuZGxlUG9pbnRlclN0YXJ0PXQ9Pnt0LnByZXZlbnREZWZhdWx0KCksdGhpcy5fc3Ryb2tlQmVnaW4odCl9LHRoaXMuX2hhbmRsZVBvaW50ZXJNb3ZlPXQ9Pnt0aGlzLl9zdHJva2VNb3ZlVXBkYXRlKHQpfSx0aGlzLl9oYW5kbGVQb2ludGVyRW5kPXQ9Pnt0aGlzLl9kcmF3aW5nU3Ryb2tlJiYodC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuX3N0cm9rZUVuZCh0KSl9LHRoaXMudmVsb2NpdHlGaWx0ZXJXZWlnaHQ9ZS52ZWxvY2l0eUZpbHRlcldlaWdodHx8LjcsdGhpcy5taW5XaWR0aD1lLm1pbldpZHRofHwuNSx0aGlzLm1heFdpZHRoPWUubWF4V2lkdGh8fDIuNSx0aGlzLnRocm90dGxlPVwidGhyb3R0bGVcImluIGU/ZS50aHJvdHRsZToxNix0aGlzLm1pbkRpc3RhbmNlPVwibWluRGlzdGFuY2VcImluIGU/ZS5taW5EaXN0YW5jZTo1LHRoaXMuZG90U2l6ZT1lLmRvdFNpemV8fDAsdGhpcy5wZW5Db2xvcj1lLnBlbkNvbG9yfHxcImJsYWNrXCIsdGhpcy5iYWNrZ3JvdW5kQ29sb3I9ZS5iYWNrZ3JvdW5kQ29sb3J8fFwicmdiYSgwLDAsMCwwKVwiLHRoaXMuY29tcG9zaXRlT3BlcmF0aW9uPWUuY29tcG9zaXRlT3BlcmF0aW9ufHxcInNvdXJjZS1vdmVyXCIsdGhpcy5fc3Ryb2tlTW92ZVVwZGF0ZT10aGlzLnRocm90dGxlP2Z1bmN0aW9uKHQsZT0yNTApe2xldCBpLHMsbixvPTAsaD1udWxsO2NvbnN0IHI9KCk9PntvPURhdGUubm93KCksaD1udWxsLGk9dC5hcHBseShzLG4pLGh8fChzPW51bGwsbj1bXSl9O3JldHVybiBmdW5jdGlvbiguLi5hKXtjb25zdCBjPURhdGUubm93KCksZD1lLShjLW8pO3JldHVybiBzPXRoaXMsbj1hLGQ8PTB8fGQ+ZT8oaCYmKGNsZWFyVGltZW91dChoKSxoPW51bGwpLG89YyxpPXQuYXBwbHkocyxuKSxofHwocz1udWxsLG49W10pKTpofHwoaD13aW5kb3cuc2V0VGltZW91dChyLGQpKSxpfX0ocy5wcm90b3R5cGUuX3N0cm9rZVVwZGF0ZSx0aGlzLnRocm90dGxlKTpzLnByb3RvdHlwZS5fc3Ryb2tlVXBkYXRlLHRoaXMuX2N0eD10LmdldENvbnRleHQoXCIyZFwiKSx0aGlzLmNsZWFyKCksdGhpcy5vbigpfWNsZWFyKCl7Y29uc3R7X2N0eDp0LGNhbnZhczplfT10aGlzO3QuZmlsbFN0eWxlPXRoaXMuYmFja2dyb3VuZENvbG9yLHQuY2xlYXJSZWN0KDAsMCxlLndpZHRoLGUuaGVpZ2h0KSx0LmZpbGxSZWN0KDAsMCxlLndpZHRoLGUuaGVpZ2h0KSx0aGlzLl9kYXRhPVtdLHRoaXMuX3Jlc2V0KHRoaXMuX2dldFBvaW50R3JvdXBPcHRpb25zKCkpLHRoaXMuX2lzRW1wdHk9ITB9ZnJvbURhdGFVUkwodCxlPXt9KXtyZXR1cm4gbmV3IFByb21pc2UoKChpLHMpPT57Y29uc3Qgbj1uZXcgSW1hZ2Usbz1lLnJhdGlvfHx3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSxoPWUud2lkdGh8fHRoaXMuY2FudmFzLndpZHRoL28scj1lLmhlaWdodHx8dGhpcy5jYW52YXMuaGVpZ2h0L28sYT1lLnhPZmZzZXR8fDAsYz1lLnlPZmZzZXR8fDA7dGhpcy5fcmVzZXQodGhpcy5fZ2V0UG9pbnRHcm91cE9wdGlvbnMoKSksbi5vbmxvYWQ9KCk9Pnt0aGlzLl9jdHguZHJhd0ltYWdlKG4sYSxjLGgsciksaSgpfSxuLm9uZXJyb3I9dD0+e3ModCl9LG4uY3Jvc3NPcmlnaW49XCJhbm9ueW1vdXNcIixuLnNyYz10LHRoaXMuX2lzRW1wdHk9ITF9KSl9dG9EYXRhVVJMKHQ9XCJpbWFnZS9wbmdcIixlKXtyZXR1cm5cImltYWdlL3N2Zyt4bWxcIj09PXQ/KFwib2JqZWN0XCIhPXR5cGVvZiBlJiYoZT12b2lkIDApLGBkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCR7YnRvYSh0aGlzLnRvU1ZHKGUpKX1gKTooXCJudW1iZXJcIiE9dHlwZW9mIGUmJihlPXZvaWQgMCksdGhpcy5jYW52YXMudG9EYXRhVVJMKHQsZSkpfW9uKCl7dGhpcy5jYW52YXMuc3R5bGUudG91Y2hBY3Rpb249XCJub25lXCIsdGhpcy5jYW52YXMuc3R5bGUubXNUb3VjaEFjdGlvbj1cIm5vbmVcIix0aGlzLmNhbnZhcy5zdHlsZS51c2VyU2VsZWN0PVwibm9uZVwiO2NvbnN0IHQ9L01hY2ludG9zaC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50O3dpbmRvdy5Qb2ludGVyRXZlbnQmJiF0P3RoaXMuX2hhbmRsZVBvaW50ZXJFdmVudHMoKToodGhpcy5faGFuZGxlTW91c2VFdmVudHMoKSxcIm9udG91Y2hzdGFydFwiaW4gd2luZG93JiZ0aGlzLl9oYW5kbGVUb3VjaEV2ZW50cygpKX1vZmYoKXt0aGlzLmNhbnZhcy5zdHlsZS50b3VjaEFjdGlvbj1cImF1dG9cIix0aGlzLmNhbnZhcy5zdHlsZS5tc1RvdWNoQWN0aW9uPVwiYXV0b1wiLHRoaXMuY2FudmFzLnN0eWxlLnVzZXJTZWxlY3Q9XCJhdXRvXCIsdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsdGhpcy5faGFuZGxlUG9pbnRlclN0YXJ0KSx0aGlzLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIix0aGlzLl9oYW5kbGVQb2ludGVyTW92ZSksdGhpcy5jYW52YXMub3duZXJEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsdGhpcy5faGFuZGxlUG9pbnRlckVuZCksdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLHRoaXMuX2hhbmRsZU1vdXNlRG93biksdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHRoaXMuX2hhbmRsZU1vdXNlTW92ZSksdGhpcy5jYW52YXMub3duZXJEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLHRoaXMuX2hhbmRsZU1vdXNlVXApLHRoaXMuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsdGhpcy5faGFuZGxlVG91Y2hTdGFydCksdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLHRoaXMuX2hhbmRsZVRvdWNoTW92ZSksdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsdGhpcy5faGFuZGxlVG91Y2hFbmQpfWlzRW1wdHkoKXtyZXR1cm4gdGhpcy5faXNFbXB0eX1mcm9tRGF0YSh0LHtjbGVhcjplPSEwfT17fSl7ZSYmdGhpcy5jbGVhcigpLHRoaXMuX2Zyb21EYXRhKHQsdGhpcy5fZHJhd0N1cnZlLmJpbmQodGhpcyksdGhpcy5fZHJhd0RvdC5iaW5kKHRoaXMpKSx0aGlzLl9kYXRhPXRoaXMuX2RhdGEuY29uY2F0KHQpfXRvRGF0YSgpe3JldHVybiB0aGlzLl9kYXRhfV9nZXRQb2ludEdyb3VwT3B0aW9ucyh0KXtyZXR1cm57cGVuQ29sb3I6dCYmXCJwZW5Db2xvclwiaW4gdD90LnBlbkNvbG9yOnRoaXMucGVuQ29sb3IsZG90U2l6ZTp0JiZcImRvdFNpemVcImluIHQ/dC5kb3RTaXplOnRoaXMuZG90U2l6ZSxtaW5XaWR0aDp0JiZcIm1pbldpZHRoXCJpbiB0P3QubWluV2lkdGg6dGhpcy5taW5XaWR0aCxtYXhXaWR0aDp0JiZcIm1heFdpZHRoXCJpbiB0P3QubWF4V2lkdGg6dGhpcy5tYXhXaWR0aCx2ZWxvY2l0eUZpbHRlcldlaWdodDp0JiZcInZlbG9jaXR5RmlsdGVyV2VpZ2h0XCJpbiB0P3QudmVsb2NpdHlGaWx0ZXJXZWlnaHQ6dGhpcy52ZWxvY2l0eUZpbHRlcldlaWdodCxjb21wb3NpdGVPcGVyYXRpb246dCYmXCJjb21wb3NpdGVPcGVyYXRpb25cImluIHQ/dC5jb21wb3NpdGVPcGVyYXRpb246dGhpcy5jb21wb3NpdGVPcGVyYXRpb259fV9zdHJva2VCZWdpbih0KXtpZighdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImJlZ2luU3Ryb2tlXCIse2RldGFpbDp0LGNhbmNlbGFibGU6ITB9KSkpcmV0dXJuO3RoaXMuX2RyYXdpbmdTdHJva2U9ITA7Y29uc3QgZT10aGlzLl9nZXRQb2ludEdyb3VwT3B0aW9ucygpLGk9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGUpLHtwb2ludHM6W119KTt0aGlzLl9kYXRhLnB1c2goaSksdGhpcy5fcmVzZXQoZSksdGhpcy5fc3Ryb2tlVXBkYXRlKHQpfV9zdHJva2VVcGRhdGUodCl7aWYoIXRoaXMuX2RyYXdpbmdTdHJva2UpcmV0dXJuO2lmKDA9PT10aGlzLl9kYXRhLmxlbmd0aClyZXR1cm4gdm9pZCB0aGlzLl9zdHJva2VCZWdpbih0KTt0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiYmVmb3JlVXBkYXRlU3Ryb2tlXCIse2RldGFpbDp0fSkpO2NvbnN0IGU9dC5jbGllbnRYLGk9dC5jbGllbnRZLHM9dm9pZCAwIT09dC5wcmVzc3VyZT90LnByZXNzdXJlOnZvaWQgMCE9PXQuZm9yY2U/dC5mb3JjZTowLG49dGhpcy5fY3JlYXRlUG9pbnQoZSxpLHMpLG89dGhpcy5fZGF0YVt0aGlzLl9kYXRhLmxlbmd0aC0xXSxoPW8ucG9pbnRzLHI9aC5sZW5ndGg+MCYmaFtoLmxlbmd0aC0xXSxhPSEhciYmbi5kaXN0YW5jZVRvKHIpPD10aGlzLm1pbkRpc3RhbmNlLGM9dGhpcy5fZ2V0UG9pbnRHcm91cE9wdGlvbnMobyk7aWYoIXJ8fCFyfHwhYSl7Y29uc3QgdD10aGlzLl9hZGRQb2ludChuLGMpO3I/dCYmdGhpcy5fZHJhd0N1cnZlKHQsYyk6dGhpcy5fZHJhd0RvdChuLGMpLGgucHVzaCh7dGltZTpuLnRpbWUseDpuLngseTpuLnkscHJlc3N1cmU6bi5wcmVzc3VyZX0pfXRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJhZnRlclVwZGF0ZVN0cm9rZVwiLHtkZXRhaWw6dH0pKX1fc3Ryb2tlRW5kKHQpe3RoaXMuX2RyYXdpbmdTdHJva2UmJih0aGlzLl9zdHJva2VVcGRhdGUodCksdGhpcy5fZHJhd2luZ1N0cm9rZT0hMSx0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiZW5kU3Ryb2tlXCIse2RldGFpbDp0fSkpKX1faGFuZGxlUG9pbnRlckV2ZW50cygpe3RoaXMuX2RyYXdpbmdTdHJva2U9ITEsdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsdGhpcy5faGFuZGxlUG9pbnRlclN0YXJ0KSx0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIix0aGlzLl9oYW5kbGVQb2ludGVyTW92ZSksdGhpcy5jYW52YXMub3duZXJEb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsdGhpcy5faGFuZGxlUG9pbnRlckVuZCl9X2hhbmRsZU1vdXNlRXZlbnRzKCl7dGhpcy5fZHJhd2luZ1N0cm9rZT0hMSx0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsdGhpcy5faGFuZGxlTW91c2VEb3duKSx0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsdGhpcy5faGFuZGxlTW91c2VNb3ZlKSx0aGlzLmNhbnZhcy5vd25lckRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsdGhpcy5faGFuZGxlTW91c2VVcCl9X2hhbmRsZVRvdWNoRXZlbnRzKCl7dGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIix0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0KSx0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsdGhpcy5faGFuZGxlVG91Y2hNb3ZlKSx0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIix0aGlzLl9oYW5kbGVUb3VjaEVuZCl9X3Jlc2V0KHQpe3RoaXMuX2xhc3RQb2ludHM9W10sdGhpcy5fbGFzdFZlbG9jaXR5PTAsdGhpcy5fbGFzdFdpZHRoPSh0Lm1pbldpZHRoK3QubWF4V2lkdGgpLzIsdGhpcy5fY3R4LmZpbGxTdHlsZT10LnBlbkNvbG9yLHRoaXMuX2N0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb249dC5jb21wb3NpdGVPcGVyYXRpb259X2NyZWF0ZVBvaW50KGUsaSxzKXtjb25zdCBuPXRoaXMuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO3JldHVybiBuZXcgdChlLW4ubGVmdCxpLW4udG9wLHMsKG5ldyBEYXRlKS5nZXRUaW1lKCkpfV9hZGRQb2ludCh0LGkpe2NvbnN0e19sYXN0UG9pbnRzOnN9PXRoaXM7aWYocy5wdXNoKHQpLHMubGVuZ3RoPjIpezM9PT1zLmxlbmd0aCYmcy51bnNoaWZ0KHNbMF0pO2NvbnN0IHQ9dGhpcy5fY2FsY3VsYXRlQ3VydmVXaWR0aHMoc1sxXSxzWzJdLGkpLG49ZS5mcm9tUG9pbnRzKHMsdCk7cmV0dXJuIHMuc2hpZnQoKSxufXJldHVybiBudWxsfV9jYWxjdWxhdGVDdXJ2ZVdpZHRocyh0LGUsaSl7Y29uc3Qgcz1pLnZlbG9jaXR5RmlsdGVyV2VpZ2h0KmUudmVsb2NpdHlGcm9tKHQpKygxLWkudmVsb2NpdHlGaWx0ZXJXZWlnaHQpKnRoaXMuX2xhc3RWZWxvY2l0eSxuPXRoaXMuX3N0cm9rZVdpZHRoKHMsaSksbz17ZW5kOm4sc3RhcnQ6dGhpcy5fbGFzdFdpZHRofTtyZXR1cm4gdGhpcy5fbGFzdFZlbG9jaXR5PXMsdGhpcy5fbGFzdFdpZHRoPW4sb31fc3Ryb2tlV2lkdGgodCxlKXtyZXR1cm4gTWF0aC5tYXgoZS5tYXhXaWR0aC8odCsxKSxlLm1pbldpZHRoKX1fZHJhd0N1cnZlU2VnbWVudCh0LGUsaSl7Y29uc3Qgcz10aGlzLl9jdHg7cy5tb3ZlVG8odCxlKSxzLmFyYyh0LGUsaSwwLDIqTWF0aC5QSSwhMSksdGhpcy5faXNFbXB0eT0hMX1fZHJhd0N1cnZlKHQsZSl7Y29uc3QgaT10aGlzLl9jdHgscz10LmVuZFdpZHRoLXQuc3RhcnRXaWR0aCxuPTIqTWF0aC5jZWlsKHQubGVuZ3RoKCkpO2kuYmVnaW5QYXRoKCksaS5maWxsU3R5bGU9ZS5wZW5Db2xvcjtmb3IobGV0IGk9MDtpPG47aSs9MSl7Y29uc3Qgbz1pL24saD1vKm8scj1oKm8sYT0xLW8sYz1hKmEsZD1jKmE7bGV0IGw9ZCp0LnN0YXJ0UG9pbnQueDtsKz0zKmMqbyp0LmNvbnRyb2wxLngsbCs9MyphKmgqdC5jb250cm9sMi54LGwrPXIqdC5lbmRQb2ludC54O2xldCB1PWQqdC5zdGFydFBvaW50Lnk7dSs9MypjKm8qdC5jb250cm9sMS55LHUrPTMqYSpoKnQuY29udHJvbDIueSx1Kz1yKnQuZW5kUG9pbnQueTtjb25zdCB2PU1hdGgubWluKHQuc3RhcnRXaWR0aCtyKnMsZS5tYXhXaWR0aCk7dGhpcy5fZHJhd0N1cnZlU2VnbWVudChsLHUsdil9aS5jbG9zZVBhdGgoKSxpLmZpbGwoKX1fZHJhd0RvdCh0LGUpe2NvbnN0IGk9dGhpcy5fY3R4LHM9ZS5kb3RTaXplPjA/ZS5kb3RTaXplOihlLm1pbldpZHRoK2UubWF4V2lkdGgpLzI7aS5iZWdpblBhdGgoKSx0aGlzLl9kcmF3Q3VydmVTZWdtZW50KHQueCx0LnkscyksaS5jbG9zZVBhdGgoKSxpLmZpbGxTdHlsZT1lLnBlbkNvbG9yLGkuZmlsbCgpfV9mcm9tRGF0YShlLGkscyl7Zm9yKGNvbnN0IG4gb2YgZSl7Y29uc3R7cG9pbnRzOmV9PW4sbz10aGlzLl9nZXRQb2ludEdyb3VwT3B0aW9ucyhuKTtpZihlLmxlbmd0aD4xKWZvcihsZXQgcz0wO3M8ZS5sZW5ndGg7cys9MSl7Y29uc3Qgbj1lW3NdLGg9bmV3IHQobi54LG4ueSxuLnByZXNzdXJlLG4udGltZSk7MD09PXMmJnRoaXMuX3Jlc2V0KG8pO2NvbnN0IHI9dGhpcy5fYWRkUG9pbnQoaCxvKTtyJiZpKHIsbyl9ZWxzZSB0aGlzLl9yZXNldChvKSxzKGVbMF0sbyl9fXRvU1ZHKHtpbmNsdWRlQmFja2dyb3VuZENvbG9yOnQ9ITF9PXt9KXtjb25zdCBlPXRoaXMuX2RhdGEsaT1NYXRoLm1heCh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSwxKSxzPXRoaXMuY2FudmFzLndpZHRoL2ksbj10aGlzLmNhbnZhcy5oZWlnaHQvaSxvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXCJzdmdcIik7aWYoby5zZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiLFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiksby5zZXRBdHRyaWJ1dGUoXCJ4bWxuczp4bGlua1wiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKSxvLnNldEF0dHJpYnV0ZShcInZpZXdCb3hcIixgMCAwICR7c30gJHtufWApLG8uc2V0QXR0cmlidXRlKFwid2lkdGhcIixzLnRvU3RyaW5nKCkpLG8uc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsbi50b1N0cmluZygpKSx0JiZ0aGlzLmJhY2tncm91bmRDb2xvcil7Y29uc3QgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicmVjdFwiKTt0LnNldEF0dHJpYnV0ZShcIndpZHRoXCIsXCIxMDAlXCIpLHQuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsXCIxMDAlXCIpLHQuc2V0QXR0cmlidXRlKFwiZmlsbFwiLHRoaXMuYmFja2dyb3VuZENvbG9yKSxvLmFwcGVuZENoaWxkKHQpfXJldHVybiB0aGlzLl9mcm9tRGF0YShlLCgodCx7cGVuQ29sb3I6ZX0pPT57Y29uc3QgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicGF0aFwiKTtpZighKGlzTmFOKHQuY29udHJvbDEueCl8fGlzTmFOKHQuY29udHJvbDEueSl8fGlzTmFOKHQuY29udHJvbDIueCl8fGlzTmFOKHQuY29udHJvbDIueSkpKXtjb25zdCBzPWBNICR7dC5zdGFydFBvaW50LngudG9GaXhlZCgzKX0sJHt0LnN0YXJ0UG9pbnQueS50b0ZpeGVkKDMpfSBDICR7dC5jb250cm9sMS54LnRvRml4ZWQoMyl9LCR7dC5jb250cm9sMS55LnRvRml4ZWQoMyl9ICR7dC5jb250cm9sMi54LnRvRml4ZWQoMyl9LCR7dC5jb250cm9sMi55LnRvRml4ZWQoMyl9ICR7dC5lbmRQb2ludC54LnRvRml4ZWQoMyl9LCR7dC5lbmRQb2ludC55LnRvRml4ZWQoMyl9YDtpLnNldEF0dHJpYnV0ZShcImRcIixzKSxpLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCgyLjI1KnQuZW5kV2lkdGgpLnRvRml4ZWQoMykpLGkuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsZSksaS5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsXCJub25lXCIpLGkuc2V0QXR0cmlidXRlKFwic3Ryb2tlLWxpbmVjYXBcIixcInJvdW5kXCIpLG8uYXBwZW5kQ2hpbGQoaSl9fSksKCh0LHtwZW5Db2xvcjplLGRvdFNpemU6aSxtaW5XaWR0aDpzLG1heFdpZHRoOm59KT0+e2NvbnN0IGg9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiKSxyPWk+MD9pOihzK24pLzI7aC5zZXRBdHRyaWJ1dGUoXCJyXCIsci50b1N0cmluZygpKSxoLnNldEF0dHJpYnV0ZShcImN4XCIsdC54LnRvU3RyaW5nKCkpLGguc2V0QXR0cmlidXRlKFwiY3lcIix0LnkudG9TdHJpbmcoKSksaC5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsZSksby5hcHBlbmRDaGlsZChoKX0pKSxvLm91dGVySFRNTH19cmV0dXJuIHN9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25hdHVyZV9wYWQudW1kLm1pbi5qcy5tYXAiXSwibmFtZXMiOlsidCIsImUiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJTaWduYXR1cmVQYWQiLCJpIiwicyIsImlzTmFOIiwiRXJyb3IiLCJ4IiwieSIsInByZXNzdXJlIiwidGltZSIsIkRhdGUiLCJub3ciLCJNYXRoIiwic3FydCIsInBvdyIsImRpc3RhbmNlVG8iLCJuIiwibyIsInN0YXJ0UG9pbnQiLCJjb250cm9sMiIsImNvbnRyb2wxIiwiZW5kUG9pbnQiLCJzdGFydFdpZHRoIiwiZW5kV2lkdGgiLCJwb2ludCIsImgiLCJjYWxjdWxhdGVDb250cm9sUG9pbnRzIiwiYzIiLCJjMSIsInN0YXJ0IiwiZW5kIiwiciIsImEiLCJjIiwiZCIsImwiLCJ1IiwidiIsIl8iLCJwIiwibSIsImciLCJ3IiwiX2V0IiwiRXZlbnRUYXJnZXQiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhbnZhcyIsIl9kcmF3aW5nU3Ryb2tlIiwiX2lzRW1wdHkiLCJfbGFzdFBvaW50cyIsIl9kYXRhIiwiX2xhc3RWZWxvY2l0eSIsIl9sYXN0V2lkdGgiLCJfaGFuZGxlTW91c2VEb3duIiwiYnV0dG9ucyIsIl9zdHJva2VCZWdpbiIsIl9oYW5kbGVNb3VzZU1vdmUiLCJfc3Ryb2tlTW92ZVVwZGF0ZSIsIl9oYW5kbGVNb3VzZVVwIiwiX3N0cm9rZUVuZCIsIl9oYW5kbGVUb3VjaFN0YXJ0IiwiY2FuY2VsYWJsZSIsInByZXZlbnREZWZhdWx0IiwidGFyZ2V0VG91Y2hlcyIsImxlbmd0aCIsImNoYW5nZWRUb3VjaGVzIiwiX2hhbmRsZVRvdWNoTW92ZSIsIl9oYW5kbGVUb3VjaEVuZCIsInRhcmdldCIsIl9oYW5kbGVQb2ludGVyU3RhcnQiLCJfaGFuZGxlUG9pbnRlck1vdmUiLCJfaGFuZGxlUG9pbnRlckVuZCIsInZlbG9jaXR5RmlsdGVyV2VpZ2h0IiwibWluV2lkdGgiLCJtYXhXaWR0aCIsInRocm90dGxlIiwibWluRGlzdGFuY2UiLCJkb3RTaXplIiwicGVuQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb21wb3NpdGVPcGVyYXRpb24iLCJhcHBseSIsImNsZWFyVGltZW91dCIsIndpbmRvdyIsInNldFRpbWVvdXQiLCJwcm90b3R5cGUiLCJfc3Ryb2tlVXBkYXRlIiwiX2N0eCIsImdldENvbnRleHQiLCJjbGVhciIsIm9uIiwiZmlsbFN0eWxlIiwiY2xlYXJSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsUmVjdCIsIl9yZXNldCIsIl9nZXRQb2ludEdyb3VwT3B0aW9ucyIsIlByb21pc2UiLCJJbWFnZSIsInJhdGlvIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInhPZmZzZXQiLCJ5T2Zmc2V0Iiwib25sb2FkIiwiZHJhd0ltYWdlIiwib25lcnJvciIsImNyb3NzT3JpZ2luIiwic3JjIiwiYnRvYSIsInRvU1ZHIiwidG9EYXRhVVJMIiwic3R5bGUiLCJ0b3VjaEFjdGlvbiIsIm1zVG91Y2hBY3Rpb24iLCJ1c2VyU2VsZWN0IiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIlBvaW50ZXJFdmVudCIsIl9oYW5kbGVQb2ludGVyRXZlbnRzIiwiX2hhbmRsZU1vdXNlRXZlbnRzIiwiX2hhbmRsZVRvdWNoRXZlbnRzIiwib3duZXJEb2N1bWVudCIsIl9mcm9tRGF0YSIsIl9kcmF3Q3VydmUiLCJiaW5kIiwiX2RyYXdEb3QiLCJjb25jYXQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsIk9iamVjdCIsImFzc2lnbiIsInBvaW50cyIsInB1c2giLCJjbGllbnRYIiwiY2xpZW50WSIsImZvcmNlIiwiX2NyZWF0ZVBvaW50IiwiX2FkZFBvaW50IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsInRvcCIsImdldFRpbWUiLCJ1bnNoaWZ0IiwiX2NhbGN1bGF0ZUN1cnZlV2lkdGhzIiwiZnJvbVBvaW50cyIsInNoaWZ0IiwidmVsb2NpdHlGcm9tIiwiX3N0cm9rZVdpZHRoIiwibWF4IiwibW92ZVRvIiwiYXJjIiwiUEkiLCJjZWlsIiwiYmVnaW5QYXRoIiwibWluIiwiX2RyYXdDdXJ2ZVNlZ21lbnQiLCJjbG9zZVBhdGgiLCJmaWxsIiwiaW5jbHVkZUJhY2tncm91bmRDb2xvciIsImNyZWF0ZUVsZW1lbnROUyIsInNldEF0dHJpYnV0ZSIsInRvU3RyaW5nIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwidG9GaXhlZCIsIm91dGVySFRNTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./js/signature_pad.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./js/signature_pad.min.js");
/******/ 	
/******/ })()
;